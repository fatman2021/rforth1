	processor pic18f248
	radix dec
	org 0x2000
	goto init_runtime

;---------------------------------------------------------
; Section: constants
;---------------------------------------------------------

TBLPTRU equ 0xff8

TBLPTRH equ 0xff7

TBLPTRL equ 0xff6

TABLAT equ 0xff5

INTCON equ 0xff2

INDF0 equ 0xfef

POSTINC0 equ 0xfee

POSTDEC0 equ 0xfed

PREINC0 equ 0xfec

PLUSW0 equ 0xfeb

FSR0H equ 0xfea

FSR0L equ 0xfe9

WREG equ 0xfe8

INDF1 equ 0xfe7

POSTINC1 equ 0xfe6

POSTDEC1 equ 0xfe5

PREINC1 equ 0xfe4

FSR1H equ 0xfe2

FSR1L equ 0xfe1

INDF2 equ 0xfdf

POSTINC2 equ 0xfde

POSTDEC2 equ 0xfdd

PREINC2 equ 0xfdc

FSR2H equ 0xfda

FSR2L equ 0xfd9

STATUS equ 0xfd8

TMR0L equ 0xfd6

T0CON equ 0xfd5

T1CON equ 0xfcd

ADRESL equ 0xfc3

ADCON0 equ 0xfc2

ADCON1 equ 0xfc1

RCREG equ 0xfae

TXREG equ 0xfad

EEADR equ 0xfa9

EEDATA equ 0xfa8

EECON2 equ 0xfa7

EECON1 equ 0xfa6

PIR2 equ 0xfa1

PIR1 equ 0xf9e

TRISB equ 0xf93

TRISA equ 0xf92

LATB equ 0xf8a

LATA equ 0xf89

CIOCON equ 0xf73

BRGCON3 equ 0xf72

BRGCON2 equ 0xf71

BRGCON1 equ 0xf70

CANCON equ 0xf6f

CANSTAT equ 0xf6e

RXB0D0 equ 0xf66

RXB0DLC equ 0xf65

RXB0SIDL equ 0xf62

RXB0SIDH equ 0xf61

RXB0CON equ 0xf60

RXB1D0 equ 0xf56

RXB1DLC equ 0xf55

RXB1SIDL equ 0xf52

RXB1SIDH equ 0xf51

RXB1CON equ 0xf50

TXB0D0 equ 0xf46

TXB0DLC equ 0xf45

TXB0SIDL equ 0xf42

TXB0SIDH equ 0xf41

TXB0CON equ 0xf40

TXB1CON equ 0xf30

TXB2CON equ 0xf20

RXM0SIDL equ 0xf19

RXM0SIDH equ 0xf18

RXF0SIDL equ 0xf01

RXF0SIDH equ 0xf00

UNKNOWN equ 0

CREAM equ 1

BROWN equ 2

WHITE equ 3

COLORS_MI_ARBITRATION equ 0x44

VALUES_MI_ARBITRATION equ 0x45

SET_MI_CALIBRATION_MI_REQUEST equ 0x46

CALIBRATION_MI_ARBITRATION equ 0x47

local_MI_addr equ 0x0

addr_MI_mask equ 0x3e0

;---------------------------------------------------------
; Section: code
;---------------------------------------------------------

can_MI_prepare_MI_buffer
	call can_MI_choose_MI_buffer
	movff can_MI_msg_MI_length,PREINC0
	clrf PREINC0,0
	movlw LOW(TXB0DLC)
	movwf PREINC0,0
	movlw HIGH(TXB0DLC)
	movwf PREINC0,0
	call tx0_GT_txn
	call op_cstore
	movff can_MI_msg_MI_length,PREINC0
	clrf PREINC0,0
	movf POSTDEC0,0,0
	iorwf POSTDEC0,0,0
	bz _lbl___146
	movlw can_MI_msg
	movwf PREINC0,0
	clrf PREINC0,0
	movlw LOW(TXB0D0)
	movwf PREINC0,0
	movlw HIGH(TXB0D0)
	movwf PREINC0,0
	call tx0_GT_txn
	movf can_MI_msg_MI_length,0,0
	call memcpy
_lbl___146
	movff can_MI_arbitration,PREINC0
	movff (can_MI_arbitration+1),PREINC0
	call _5_LT__LT_
	call _1_GT_2
	movlw LOW(TXB0SIDH)
	movwf PREINC0,0
	movlw HIGH(TXB0SIDH)
	movwf PREINC0,0
	call tx0_GT_txn
	call op_cstore
	movlw LOW(TXB0SIDL)
	movwf PREINC0,0
	movlw HIGH(TXB0SIDL)
	movwf PREINC0,0
	call tx0_GT_txn

op_cstore
	btfsc INDF0,4,0
	goto eepromc_EX_
	movff POSTDEC0,FSR1H
	movff POSTDEC0,FSR1L
	movf POSTDEC0,0,0
	movff POSTDEC0,INDF1
	return

can_MI_handle_MI_message
	call can_MI_receive
	movff can_MI_arbitration,PREINC0
	movff (can_MI_arbitration+1),PREINC0
	call dup
	movlw SET_MI_CALIBRATION_MI_REQUEST
	movwf PREINC0,0
	clrf PREINC0,0
	call xor
	movf POSTDEC0,0,0
	iorwf POSTDEC0,0,0
	bnz _lbl___244
	movf POSTDEC0,1,0
	movf POSTDEC0,1,0
	goto set_MI_thresholds
_lbl___244
	btfsc can_MI_msg_MI_flags,0,0
	bra _lbl___245
	movf POSTDEC0,1,0
	movf POSTDEC0,1,0
	goto can_MI_unknown_MI_msg
_lbl___245
	call dup
	movlw COLORS_MI_ARBITRATION
	movwf PREINC0,0
	clrf PREINC0,0
	call xor
	movf POSTDEC0,0,0
	iorwf POSTDEC0,0,0
	bnz _lbl___247
	movf POSTDEC0,1,0
	movf POSTDEC0,1,0
	goto can_MI_send_MI_colors
_lbl___247
	call dup
	movlw VALUES_MI_ARBITRATION
	movwf PREINC0,0
	clrf PREINC0,0
	call xor
	movf POSTDEC0,0,0
	iorwf POSTDEC0,0,0
	bnz _lbl___249
	movf POSTDEC0,1,0
	movf POSTDEC0,1,0
	goto can_MI_send_MI_values
_lbl___249
	call dup
	movlw CALIBRATION_MI_ARBITRATION
	movwf PREINC0,0
	clrf PREINC0,0
	call xor
	movf POSTDEC0,0,0
	iorwf POSTDEC0,0,0
	bnz _lbl___251
	movf POSTDEC0,1,0
	movf POSTDEC0,1,0
	goto can_MI_send_MI_calibration
_lbl___251

can_MI_unknown_MI_msg
	movlw LOW((_data___4+0x8000))
	movwf PREINC0,0
	movlw HIGH((_data___4+0x8000))
	movwf PREINC0,0
	movlw 37
	movwf PREINC0,0
	clrf PREINC0,0
	call type
	call _DT_
	movlw LOW((_data___5+0x8000))
	movwf PREINC0,0
	movlw HIGH((_data___5+0x8000))
	movwf PREINC0,0
	movlw 5
	movwf PREINC0,0
	clrf PREINC0,0
	call type
	btfsc can_MI_msg_MI_flags,0,0
	bra _lbl___241
	movlw LOW((_data___6+0x8000))
	movwf PREINC0,0
	movlw HIGH((_data___6+0x8000))
	movwf PREINC0,0
	movlw 3
	movwf PREINC0,0
	clrf PREINC0,0
	call type
_lbl___241
	movlw LOW((_data___7+0x8000))
	movwf PREINC0,0
	movlw HIGH((_data___7+0x8000))
	movwf PREINC0,0
	movlw 3
	movwf PREINC0,0
	clrf PREINC0,0
	call type

cr
	movlw 0xa
	call emit
	movlw 0xd

emit
	btfss PIR1,4,0
	bra emit
	movwf TXREG,0
	return

can_MI_init
	bsf TRISB,3,0
	bcf TRISB,2,0
	call can_MI_config
	movlw 0x9
	movwf BRGCON1,0
	movlw 0x90
	movwf BRGCON2,0
	movlw 0x2
	movwf BRGCON3,0
	movlw 0x40
	movwf CIOCON,0
	call can_MI_disable_MI_all_MI_filters

can_MI_normal
	clrf PREINC0,0
	clrf PREINC0,0

can_MI_mode
	call _5_LT__LT_
	call dup
	movf CANCON,0,0
	andlw 0x1f
	movwf PREINC0,0
	clrf PREINC0,0
	call or
	movf POSTDEC0,0,0
	movff POSTDEC0,CANCON
_lbl___153
	call dup
	movf CANSTAT,0,0
	andlw 0xe0
	movwf PREINC0,0
	clrf PREINC0,0
	call xor
	movf POSTDEC0,0,0
	iorwf POSTDEC0,0,0
	bnz _lbl___153
	movf POSTDEC0,1,0
	movf POSTDEC0,1,0
	return

can_MI_send_MI_values
	movlw VALUES_MI_ARBITRATION
	movwf can_MI_arbitration,0
	clrf (can_MI_arbitration+1),0
	movlw 8
	movwf can_MI_msg_MI_length,0
	movff (current_MI_value_MI_0+1),(can_MI_msg_MI_0+1)
	movff current_MI_value_MI_0,can_MI_msg_MI_0
	movff (current_MI_value_MI_1+1),(can_MI_msg_MI_2+1)
	movff current_MI_value_MI_1,can_MI_msg_MI_2
	movff (current_MI_value_MI_2+1),(can_MI_msg_MI_4+1)
	movff current_MI_value_MI_2,can_MI_msg_MI_4
	movff (current_MI_value_MI_3+1),(can_MI_msg_MI_6+1)
	movff current_MI_value_MI_3,can_MI_msg_MI_6

can_MI_transmit
	call can_MI_prepare_MI_buffer
	call can_MI_clr_MI_rtr

can_MI_transmit_MI_buffer
	movlw LOW(TXB0CON)
	movwf PREINC0,0
	movlw HIGH(TXB0CON)
	movwf PREINC0,0
	call tx0_GT_txn
	movff POSTDEC0,FSR1H
	movff POSTDEC0,FSR1L
	bsf INDF1,3,0
	return

step
	call can_MI_msg_MI_present_QM_
	movf POSTDEC0,0,0
	iorwf POSTDEC0,0,0
	btfss STATUS,2,0
	call can_MI_handle_MI_message
	call maybe_MI_send_MI_colors
	call serial_MI_dump
	btfss PIR1,5,0
	return
	call key
	movwf PREINC0,0
	clrf PREINC0,0
	movlw 109
	movwf PREINC0,0
	clrf PREINC0,0
	call xor
	movf POSTDEC0,0,0
	iorwf POSTDEC0,0,0
	btfss STATUS,2,0
	return

interactive_MI_mode
	call key
	movwf PREINC0,0
	clrf PREINC0,0
	call handle_MI_key
	bra interactive_MI_mode

mainloop
	call step
	bra mainloop

op_minus
	movff POSTDEC0,temp_x1
	movf POSTDEC0,0,0
	movf POSTDEC0,1,0
	subwf POSTINC0,1,0
	movf temp_x1,0,0
	subwfb INDF0,1,0
	return

color_MI_changed_QM_
	call dup
	movlw LOW(current_MI_colors)
	movf POSTDEC0,1,0
	addwf POSTINC0,1,0
	movlw HIGH(current_MI_colors)
	addwfc INDF0,1,0
	call op_cfetch_tos
	call swap
	movlw LOW(previous_MI_colors)
	movf POSTDEC0,1,0
	addwf POSTINC0,1,0
	movlw HIGH(previous_MI_colors)
	addwfc INDF0,1,0
	call op_cfetch_tos
	call xor

op_normalize
	movf POSTDEC0,0,0
	iorwf POSTDEC0,0,0

op_normalize_z
	movlw -1
	btfsc STATUS,2,0
	addlw 1
	movwf PREINC0,0
	movwf PREINC0,0
	return

_GT_
	call swap

_LT_
	call _2dupxor_GT_w
	btfss WREG,7,0
	bra _lbl___21
	movf POSTDEC0,1,0
	movf POSTDEC0,1,0
	goto _0_LT_
_lbl___21
	call op_minus

_0_LT_
	movlw -1
	btfss POSTDEC0,7,0
	movlw 0
	movwf POSTINC0,0
	movwf INDF0,0
	return

_DT_
	call _1_GT_2
	call emit_MI_8

emit_MI_8
	call dup
	movf POSTDEC0,0,0
	swapf POSTINC0,1,0
	movf POSTDEC0,0
	movf POSTDEC0,0
	andlw 0xf
	call emit_MI_4
	movf POSTDEC0,0
	movf POSTDEC0,0
	andlw 0xf

emit_MI_4
	call nibble_MI_to_MI_hex
	goto emit

_5_LT__LT_
	call _2_ST_

_16_ST_
	call _4_ST_

_4_ST_
	call _2_ST_

_2_ST_
	bcf STATUS,0,0
	movf POSTDEC0,0,0
	rlcf POSTINC0,1,0
	rlcf INDF0,1,0
	return

_5_GT__GT_
	rlcf INDF0,0,0
	rrcf POSTDEC0,1,0
	rrcf POSTINC0,1,0

_16_SL_
	call _4_SL_

_4_SL_
	rlcf INDF0,0,0
	rrcf POSTDEC0,1,0
	rrcf POSTINC0,1,0
	rlcf INDF0,0,0
	rrcf POSTDEC0,1,0
	rrcf POSTINC0,1,0
	return

can_MI_choose_MI_buffer
	lfsr 1,TXB0CON
	btfsc INDF1,3,0
	bra _lbl___141
	clrf PREINC0,0
	clrf PREINC0,0
	goto can_MI_set_MI_buffer
_lbl___141
	btfsc can_MI_flags,0,0
	bra can_MI_choose_MI_buffer
	lfsr 1,TXB1CON
	btfsc INDF1,3,0
	bra _lbl___143
	movlw 1
	movwf PREINC0,0
	clrf PREINC0,0
	goto can_MI_set_MI_buffer
_lbl___143
	lfsr 1,TXB2CON
	btfsc INDF1,3,0
	bra can_MI_choose_MI_buffer
	movlw 2
	movwf PREINC0,0
	clrf PREINC0,0

can_MI_set_MI_buffer
	movf POSTDEC0,0,0
	movff POSTDEC0,can_MI_buffer

compute_MI_can_MI_offset
	movff can_MI_buffer,PREINC0
	clrf PREINC0,0
	call _16_ST_
	movf POSTDEC0,0,0
	movff POSTDEC0,can_MI_offset
	return

init
	movlw 0x81
	movwf ADCON0,0
	movlw 0xc2
	movwf ADCON1,0
	bcf TRISB,0,0
	bcf TRISB,1,0
	bsf TRISB,4,0
	bcf TRISA,5,0
	movlw 0x84
	movwf T0CON,0
	movlw 0x91
	movwf T1CON,0
	call read_MI_from_MI_eeprom
	bsf LATB,0,0
	bcf LATB,1,0

can_MI_setup
	call can_MI_init
	call can_MI_config
	movlw LOW(addr_MI_mask)
	movwf PREINC0,0
	movlw HIGH(addr_MI_mask)
	movwf PREINC0,0
	movlw 0
	call can_MI_set_MI_mask
	clrf PREINC0,0
	clrf PREINC0,0
	movlw 0
	call can_MI_set_MI_filter

can_MI_loopback
	movlw 0x2
	movwf PREINC0,0
	clrf PREINC0,0
	goto can_MI_mode

channel_MI_determine_MI_color
	call channel_MI_measure

determine_MI_color
	call dup
	movff brown_MI_cream_MI_threshold,PREINC0
	movff (brown_MI_cream_MI_threshold+1),PREINC0
	call _LT_
	movf POSTDEC0,0,0
	iorwf POSTDEC0,0,0
	bz _lbl___220
	movf POSTDEC0,1,0
	movf POSTDEC0,1,0
	goto brown_MI_detected
_lbl___220
	movff cream_MI_white_MI_threshold,PREINC0
	movff (cream_MI_white_MI_threshold+1),PREINC0
	call _GT_
	movf POSTDEC0,0,0
	iorwf POSTDEC0,0,0
	bz _lbl___221
	movf POSTDEC0,1,0
	movf POSTDEC0,1,0
	goto white_MI_detected
_lbl___221
	movf POSTDEC0,1,0
	movf POSTDEC0,1,0

cream_MI_detected
	movlw LOW((_data___3+0x8000))
	movwf PREINC0,0
	movlw HIGH((_data___3+0x8000))
	movwf PREINC0,0
	movlw 14
	movwf PREINC0,0
	clrf PREINC0,0
	call type
	call cr
	movlw CREAM
	movwf PREINC0,0
	clrf PREINC0,0
	return

maybe_MI_send_MI_colors
	btfss PIR1,0,0
	return
	call colors_MI_changed_QM_
	movf POSTDEC0,0,0
	iorwf POSTDEC0,0,0
	btfsc STATUS,2,0
	return

can_MI_send_MI_colors
	movlw COLORS_MI_ARBITRATION
	movwf can_MI_arbitration,0
	clrf (can_MI_arbitration+1),0
	movlw 4
	movwf can_MI_msg_MI_length,0
	movff current_MI_color_MI_0,can_MI_msg_MI_0
	movff current_MI_color_MI_1,can_MI_msg_MI_1
	movff current_MI_color_MI_2,can_MI_msg_MI_2
	movff current_MI_color_MI_3,can_MI_msg_MI_3
	call can_MI_transmit

timer1_MI_reset
	clrf TMR0L,0
	clrf (TMR0L+1),0
	bcf PIR1,0,0
	return

handle_MI_key
	call dup
	movlw 48
	movwf PREINC0,0
	clrf PREINC0,0
	call xor
	movf POSTDEC0,0,0
	iorwf POSTDEC0,0,0
	bnz _lbl___267
	movlw LOW((_data___32+0x8000))
	movwf PREINC0,0
	movlw HIGH((_data___32+0x8000))
	movwf PREINC0,0
	movlw 11
	movwf PREINC0,0
	clrf PREINC0,0
	call type
	call dup
	call channel_MI_measure
	call _DT_
	call channel_MI_determine_MI_color
	call _DT_
	goto cr
_lbl___267
	call dup
	movlw 49
	movwf PREINC0,0
	clrf PREINC0,0
	call xor
	movf POSTDEC0,0,0
	iorwf POSTDEC0,0,0
	bnz _lbl___269
	movlw LOW((_data___33+0x8000))
	movwf PREINC0,0
	movlw HIGH((_data___33+0x8000))
	movwf PREINC0,0
	movlw 11
	movwf PREINC0,0
	clrf PREINC0,0
	call type
	call dup
	call channel_MI_measure
	call _DT_
	call channel_MI_determine_MI_color
	call _DT_
	goto cr
_lbl___269
	call dup
	movlw 50
	movwf PREINC0,0
	clrf PREINC0,0
	call xor
	movf POSTDEC0,0,0
	iorwf POSTDEC0,0,0
	bnz _lbl___271
	movlw LOW((_data___34+0x8000))
	movwf PREINC0,0
	movlw HIGH((_data___34+0x8000))
	movwf PREINC0,0
	movlw 11
	movwf PREINC0,0
	clrf PREINC0,0
	call type
	call dup
	call channel_MI_measure
	call _DT_
	call channel_MI_determine_MI_color
	call _DT_
	goto cr
_lbl___271
	call dup
	movlw 51
	movwf PREINC0,0
	clrf PREINC0,0
	call xor
	movf POSTDEC0,0,0
	iorwf POSTDEC0,0,0
	bnz _lbl___273
	movlw LOW((_data___35+0x8000))
	movwf PREINC0,0
	movlw HIGH((_data___35+0x8000))
	movwf PREINC0,0
	movlw 11
	movwf PREINC0,0
	clrf PREINC0,0
	call type
	call dup
	call channel_MI_measure
	call _DT_
	call channel_MI_determine_MI_color
	call _DT_
	goto cr
_lbl___273
	call dup
	movlw 113
	movwf PREINC0,0
	clrf PREINC0,0
	call xor
	movf POSTDEC0,0,0
	iorwf POSTDEC0,0,0
	bnz _lbl___275
	movf POSTDEC0,1,0
	movf POSTDEC0,1,0
	movlw LOW((_data___36+0x8000))
	movwf PREINC0,0
	movlw HIGH((_data___36+0x8000))
	movwf PREINC0,0
	movlw 12
	movwf PREINC0,0
	clrf PREINC0,0
	call type
	goto calibration
_lbl___275
	call dup
	movlw 100
	movwf PREINC0,0
	clrf PREINC0,0
	call xor
	movf POSTDEC0,0,0
	iorwf POSTDEC0,0,0
	bnz _lbl___277
	movf POSTDEC0,1,0
	movf POSTDEC0,1,0
	movlw LOW((_data___37+0x8000))
	movwf PREINC0,0
	movlw HIGH((_data___37+0x8000))
	movwf PREINC0,0
	movlw 16
	movwf PREINC0,0
	clrf PREINC0,0
	call type
	call depth
	call _DT_
	goto cr
_lbl___277
	call dup
	movlw 117
	movwf PREINC0,0
	clrf PREINC0,0
	call xor
	movf POSTDEC0,0,0
	iorwf POSTDEC0,0,0
	bnz _lbl___279
	movf POSTDEC0,1,0
	movf POSTDEC0,1,0
	call print_MI_usage
	call _DT_
	goto cr
_lbl___279
	call dup
	movlw 108
	movwf PREINC0,0
	clrf PREINC0,0
	call xor
	movf POSTDEC0,0,0
	iorwf POSTDEC0,0,0
	bnz _lbl___281
	movf POSTDEC0,1,0
	movf POSTDEC0,1,0
	movlw LOW((_data___38+0x8000))
	movwf PREINC0,0
	movlw HIGH((_data___38+0x8000))
	movwf PREINC0,0
	movlw 11
	movwf PREINC0,0
	clrf PREINC0,0
	call type
	call cr
	goto can_MI_loopback
_lbl___281
	call dup
	movlw 107
	movwf PREINC0,0
	clrf PREINC0,0
	call xor
	movf POSTDEC0,0,0
	iorwf POSTDEC0,0,0
	bnz _lbl___283
	movf POSTDEC0,1,0
	movf POSTDEC0,1,0
	movlw LOW((_data___39+0x8000))
	movwf PREINC0,0
	movlw HIGH((_data___39+0x8000))
	movwf PREINC0,0
	movlw 12
	movwf PREINC0,0
	clrf PREINC0,0
	call type
	call cr
	goto can_MI_normal
_lbl___283
	call dup
	movlw 115
	movwf PREINC0,0
	clrf PREINC0,0
	call xor
	movf POSTDEC0,0,0
	iorwf POSTDEC0,0,0
	bnz _lbl___285
	movf POSTDEC0,1,0
	movf POSTDEC0,1,0
	goto step
_lbl___285
	call dup
	movlw 76
	movwf PREINC0,0
	clrf PREINC0,0
	call xor
	movf POSTDEC0,0,0
	iorwf POSTDEC0,0,0
	bnz _lbl___287
	movf POSTDEC0,1,0
	movf POSTDEC0,1,0
	btg LATA,5,0
	movlw LOW((_data___40+0x8000))
	movwf PREINC0,0
	movlw HIGH((_data___40+0x8000))
	movwf PREINC0,0
	movlw 21
	movwf PREINC0,0
	clrf PREINC0,0
	call type
	goto cr
_lbl___287
	movf POSTDEC0,1,0
	movf POSTDEC0,1,0

print_MI_usage
	movlw LOW((_data___17+0x8000))
	movwf PREINC0,0
	movlw HIGH((_data___17+0x8000))
	movwf PREINC0,0
	movlw 6
	movwf PREINC0,0
	clrf PREINC0,0
	call type
	call cr
	movlw LOW((_data___18+0x8000))
	movwf PREINC0,0
	movlw HIGH((_data___18+0x8000))
	movwf PREINC0,0
	movlw 31
	movwf PREINC0,0
	clrf PREINC0,0
	call type
	call cr
	movlw LOW((_data___19+0x8000))
	movwf PREINC0,0
	movlw HIGH((_data___19+0x8000))
	movwf PREINC0,0
	movlw 48
	movwf PREINC0,0
	clrf PREINC0,0
	call type
	call cr
	movlw LOW((_data___20+0x8000))
	movwf PREINC0,0
	movlw HIGH((_data___20+0x8000))
	movwf PREINC0,0
	movlw 38
	movwf PREINC0,0
	clrf PREINC0,0
	call type
	call cr
	movlw LOW((_data___21+0x8000))
	movwf PREINC0,0
	movlw HIGH((_data___21+0x8000))
	movwf PREINC0,0
	movlw 43
	movwf PREINC0,0
	clrf PREINC0,0
	call type
	call cr
	movlw LOW((_data___22+0x8000))
	movwf PREINC0,0
	movlw HIGH((_data___22+0x8000))
	movwf PREINC0,0
	movlw 39
	movwf PREINC0,0
	clrf PREINC0,0
	call type
	call cr
	movlw LOW((_data___23+0x8000))
	movwf PREINC0,0
	movlw HIGH((_data___23+0x8000))
	movwf PREINC0,0
	movlw 35
	movwf PREINC0,0
	clrf PREINC0,0
	call type
	call cr
	movlw LOW((_data___24+0x8000))
	movwf PREINC0,0
	movlw HIGH((_data___24+0x8000))
	movwf PREINC0,0
	movlw 55
	movwf PREINC0,0
	clrf PREINC0,0
	call type
	call cr
	movlw LOW((_data___25+0x8000))
	movwf PREINC0,0
	movlw HIGH((_data___25+0x8000))
	movwf PREINC0,0
	movlw 61
	movwf PREINC0,0
	clrf PREINC0,0
	call type
	call cr
	movlw LOW((_data___26+0x8000))
	movwf PREINC0,0
	movlw HIGH((_data___26+0x8000))
	movwf PREINC0,0
	movlw 22
	movwf PREINC0,0
	clrf PREINC0,0
	call type
	goto cr

init_runtime
	movlb 1
	clrf calibrated_QM_,1
	clrf (calibrated_QM_+1),1
	clrf current_MI_value_MI_0,1
	clrf (current_MI_value_MI_0+1),1
	clrf current_MI_value_MI_1,1
	clrf (current_MI_value_MI_1+1),1
	clrf current_MI_value_MI_2,1
	clrf (current_MI_value_MI_2+1),1
	clrf current_MI_value_MI_3,1
	clrf (current_MI_value_MI_3+1),1
	clrf current_MI_color_MI_0,1
	clrf current_MI_color_MI_1,1
	clrf current_MI_color_MI_2,1
	clrf current_MI_color_MI_3,1
	clrf brown_MI_cream_MI_threshold,1
	clrf (brown_MI_cream_MI_threshold+1),1
	clrf cream_MI_white_MI_threshold,1
	clrf (cream_MI_white_MI_threshold+1),1
	movlw 0x5f
	movwf FSR0L,0
	clrf FSR0H,0
	movlw 0xbf
	movwf FSR2L,0
	clrf FSR2H,0

main
	call init
	call greetings
	goto mainloop

m0_GT_mn
	movff can_MI_buffer,PREINC0
	clrf PREINC0,0
	call _4_ST_

op_plus
	movff POSTDEC0,temp_x1
	movf POSTDEC0,0,0
	movf POSTDEC0,1,0
	addwf POSTINC0,1,0
	movf temp_x1,0,0
	addwfc INDF0,1,0
	return

can_MI_msg_MI_present_QM_
	movlw -1
	btfss RXB0CON,7,0
	addlw 1
	movwf PREINC0,0
	movwf PREINC0,0
	lfsr 1,RXB1CON
	movlw -1
	btfss INDF1,7,0
	addlw 1
	movwf PREINC0,0
	movwf PREINC0,0

or
	movff POSTDEC0,temp_x1
	movf POSTDEC0,0,0
	movf POSTDEC0,1,0
	iorwf POSTINC0,1,0
	movf temp_x1,0,0
	iorwf INDF0,1,0
	return

table_MI_addr_EX_
	clrf TBLPTRU,0
	call _1_GT_2
	movf POSTDEC0,0,0
	movff POSTDEC0,TBLPTRH
	movf POSTDEC0,0,0
	movff POSTDEC0,TBLPTRL
	bcf EECON1,6,0
	return

eeprom_EX_
	movff POSTDEC0,PREINC2
	movff POSTDEC0,PREINC2
	call _1_GT_2
	movff POSTDEC2,PREINC0
	movff POSTINC2,PREINC0
	movf POSTDEC0,0,0
	infsnz POSTINC0,1,0
	incf INDF0,1,0
	movf POSTDEC0,0
	movf POSTDEC0,0
	call eepromc_EX_
	movff POSTDEC2,PREINC0
	movff POSTDEC2,PREINC0
	movf POSTDEC0,0
	movf POSTDEC0,0

eepromc_EX_
	call eeprom_MI_addr_EX_
	movf POSTDEC0,0,0
	movff POSTDEC0,EEDATA
	bsf EECON1,2,0
	movlw 0x55
	movwf EECON2,0
	movlw 0xaa
	movwf EECON2,0
	bsf EECON1,1,0
_lbl___72
	btfsc EECON1,1,0
	bra _lbl___72
	bcf EECON1,2,0
	bcf PIR2,4,0
	return

print_MI_color
	call dup
	movf POSTDEC0,0,0
	iorwf POSTDEC0,0,0
	bnz _lbl___253
	movf POSTDEC0,1,0
	movf POSTDEC0,1,0
	movlw LOW((_data___8+0x8000))
	movwf PREINC0,0
	movlw HIGH((_data___8+0x8000))
	movwf PREINC0,0
	movlw 7
	movwf PREINC0,0
	clrf PREINC0,0
	goto type
_lbl___253
	call dup
	movlw CREAM
	movwf PREINC0,0
	clrf PREINC0,0
	call xor
	movf POSTDEC0,0,0
	iorwf POSTDEC0,0,0
	bnz _lbl___255
	movf POSTDEC0,1,0
	movf POSTDEC0,1,0
	movlw LOW((_data___9+0x8000))
	movwf PREINC0,0
	movlw HIGH((_data___9+0x8000))
	movwf PREINC0,0
	movlw 5
	movwf PREINC0,0
	clrf PREINC0,0
	goto type
_lbl___255
	call dup
	movlw BROWN
	movwf PREINC0,0
	clrf PREINC0,0
	call xor
	movf POSTDEC0,0,0
	iorwf POSTDEC0,0,0
	bnz _lbl___257
	movf POSTDEC0,1,0
	movf POSTDEC0,1,0
	movlw LOW((_data___10+0x8000))
	movwf PREINC0,0
	movlw HIGH((_data___10+0x8000))
	movwf PREINC0,0
	movlw 5
	movwf PREINC0,0
	clrf PREINC0,0
	goto type
_lbl___257
	call dup
	movlw WHITE
	movwf PREINC0,0
	clrf PREINC0,0
	call xor
	movf POSTDEC0,0,0
	iorwf POSTDEC0,0,0
	bnz _lbl___259
	movf POSTDEC0,1,0
	movf POSTDEC0,1,0
	movlw LOW((_data___11+0x8000))
	movwf PREINC0,0
	movlw HIGH((_data___11+0x8000))
	movwf PREINC0,0
	movlw 5
	movwf PREINC0,0
	clrf PREINC0,0
	goto type
_lbl___259
	movf POSTDEC0,1,0
	movf POSTDEC0,1,0
	movlw LOW((_data___12+0x8000))
	movwf PREINC0,0
	movlw HIGH((_data___12+0x8000))
	movwf PREINC0,0
	movlw 16
	movwf PREINC0,0
	clrf PREINC0,0

type
	call dup
	movf POSTDEC0,0,0
	iorwf POSTDEC0,0,0
	btfsc STATUS,2,0
	goto _2drop
	movf POSTDEC0,0
	movf POSTDEC0,0
	movwf PREINC2,0
_lbl___88
	call dup
	call op_cfetch_tos
	movf POSTDEC0,0
	movf POSTDEC0,0
	call emit
	movf POSTDEC0,0,0
	infsnz POSTINC0,1,0
	incf INDF0,1,0
	decfsz INDF2,1,0
	bra _lbl___88
	movf POSTDEC2,1,0
	movf POSTDEC0,1,0
	movf POSTDEC0,1,0
	return

can_MI_receive
	btfsc RXB0CON,7,0
	goto can_MI_receive_MI_buffer0
	lfsr 1,RXB1CON
	btfss INDF1,7,0
	bra can_MI_receive

can_MI_receive_MI_buffer1
	movff RXB1DLC,WREG
	andlw 0xf
	movwf PREINC0,0
	clrf PREINC0,0
	call dup
	movf POSTDEC0,0,0
	movff POSTDEC0,can_MI_msg_MI_length
	movf POSTDEC0,0,0
	iorwf POSTDEC0,0,0
	bz _lbl___122
	movlw LOW(RXB1D0)
	movwf PREINC0,0
	movlw HIGH(RXB1D0)
	movwf PREINC0,0
	movlw can_MI_msg
	movwf PREINC0,0
	clrf PREINC0,0
	movf can_MI_msg_MI_length,0,0
	call memcpy
_lbl___122
	clrf can_MI_msg_MI_flags,0
	lfsr 1,RXB1DLC
	btfsc INDF1,6,0
	bsf can_MI_msg_MI_flags,0,0
	movff RXB1SIDL,PREINC0
	movff RXB1SIDH,PREINC0
	call _5_GT__GT_
	movff POSTDEC0,(can_MI_arbitration+1)
	movff POSTDEC0,can_MI_arbitration
	lfsr 1,RXB1CON
	bcf INDF1,7,0
	return

set_MI_thresholds
	movff can_MI_msg_MI_0,PREINC0
	movff (can_MI_msg_MI_0+1),PREINC0
	clrf PREINC0,0
	movlw HIGH(cream_MI_white_MI_threshold_MI_eeprom)
	movwf PREINC0,0
	call op_store
	movff can_MI_msg_MI_2,PREINC0
	movff (can_MI_msg_MI_2+1),PREINC0
	movlw LOW(brown_MI_cream_MI_threshold_MI_eeprom)
	movwf PREINC0,0
	movlw HIGH(brown_MI_cream_MI_threshold_MI_eeprom)
	movwf PREINC0,0
	call op_store

read_MI_from_MI_eeprom
	clrf PREINC0,0
	movlw HIGH(cream_MI_white_MI_threshold_MI_eeprom)
	movwf PREINC0,0
	call op_fetch_tos
	movff POSTDEC0,(cream_MI_white_MI_threshold+1)
	movff POSTDEC0,cream_MI_white_MI_threshold
	movlw LOW(brown_MI_cream_MI_threshold_MI_eeprom)
	movwf PREINC0,0
	movlw HIGH(brown_MI_cream_MI_threshold_MI_eeprom)
	movwf PREINC0,0
	call op_fetch_tos
	movff POSTDEC0,(brown_MI_cream_MI_threshold+1)
	movff POSTDEC0,brown_MI_cream_MI_threshold
	return

flash_MI_addr_EX_
	bcf INDF0,7,0
	bsf EECON1,7,0
	bra table_MI_addr_EX_

tx0_GT_txn
	movff can_MI_offset,PREINC0
	clrf PREINC0,0
	goto op_minus

can_MI_config
	movlw 0x4
	movwf PREINC0,0
	clrf PREINC0,0
	goto can_MI_mode

can_MI_set_MI_filter
	movwf can_MI_buffer,0
	call _5_LT__LT_
	call _1_GT_2
	clrf PREINC0,0
	movlw HIGH(RXF0SIDH)
	movwf PREINC0,0
	call m0_GT_mn
	call op_cstore
	movlw LOW(RXF0SIDL)
	movwf PREINC0,0
	movlw HIGH(RXF0SIDL)
	movwf PREINC0,0
	call m0_GT_mn
	goto op_cstore

can_MI_set_MI_mask
	movwf can_MI_buffer,0
	call _5_LT__LT_
	call _1_GT_2
	movlw LOW(RXM0SIDH)
	movwf PREINC0,0
	movlw HIGH(RXM0SIDH)
	movwf PREINC0,0
	call m0_GT_mn
	call op_cstore
	movlw LOW(RXM0SIDL)
	movwf PREINC0,0
	movlw HIGH(RXM0SIDL)
	movwf PREINC0,0
	call m0_GT_mn
	goto op_cstore

channel_MI_measure
	call select_MI_channel
	bsf LATA,5,0
	call wait_MI_timer0
	call _4_MI_measures
	bcf LATA,5,0
	call wait_MI_timer0
	call _4_MI_measures
	goto op_minus

update_MI_color
	call dup
	movlw LOW(current_MI_colors)
	movf POSTDEC0,1,0
	addwf POSTINC0,1,0
	movlw HIGH(current_MI_colors)
	addwfc INDF0,1,0
	call op_cfetch_tos
	call swap
	movlw LOW(previous_MI_colors)
	movf POSTDEC0,1,0
	addwf POSTINC0,1,0
	movlw HIGH(previous_MI_colors)
	addwfc INDF0,1,0
	call op_cfetch_tos
	goto op_cstore

can_MI_send_MI_calibration
	movlw CALIBRATION_MI_ARBITRATION
	movwf can_MI_arbitration,0
	clrf (can_MI_arbitration+1),0
	movlw 4
	movwf can_MI_msg_MI_length,0
	movff (cream_MI_white_MI_threshold+1),(can_MI_msg_MI_0+1)
	movff cream_MI_white_MI_threshold,can_MI_msg_MI_0
	movff (brown_MI_cream_MI_threshold+1),(can_MI_msg_MI_2+1)
	movff brown_MI_cream_MI_threshold,can_MI_msg_MI_2
	goto can_MI_transmit

greetings
	movlw LOW((_data___41+0x8000))
	movwf PREINC0,0
	movlw HIGH((_data___41+0x8000))
	movwf PREINC0,0
	movlw 30
	movwf PREINC0,0
	clrf PREINC0,0
	call type
	goto cr

dup
	movlw -1
	movff PLUSW0,PREINC0
	movff PLUSW0,PREINC0
	return

op_store
	btfsc INDF0,4,0
	goto eeprom_EX_
	movff POSTDEC0,FSR1H
	movff POSTDEC0,FSR1L
	movff POSTDEC0,PREINC1
	movf POSTDEC1,0,0
	movff POSTDEC0,INDF1
	return

op_fetch_tos
	btfsc INDF0,7,0
	goto flash_AT_
	btfsc INDF0,4,0
	goto eeprom_AT_
	movff POSTDEC0,FSR1H
	movff POSTDEC0,FSR1L
	movff POSTINC1,PREINC0
	movff INDF1,PREINC0
	return

op_cfetch_tos
	btfsc INDF0,7,0
	goto flashc_AT_
	btfsc INDF0,4,0
	goto eepromc_AT_
	movff POSTDEC0,FSR1H
	movff POSTDEC0,FSR1L
	movff INDF1,PREINC0
	clrf PREINC0,0
	return

swap
	movff POSTDEC0,(temp_x1+1)
	movff POSTDEC0,temp_x1
	movff POSTDEC0,PREINC2
	movff POSTDEC0,PREINC2
	movff temp_x1,PREINC0
	movff (temp_x1+1),PREINC0
	movff POSTDEC2,PREINC0
	movff POSTDEC2,PREINC0
	return

_2drop
	movf POSTDEC0,1,0
	movf POSTDEC0,1,0
	movf POSTDEC0,1,0
	movf POSTDEC0,1,0
	return

xor
	movff POSTDEC0,temp_x1
	movf POSTDEC0,0,0
	movf POSTDEC0,1,0
	xorwf POSTINC0,1,0
	movf temp_x1,0,0
	xorwf INDF0,1,0
	return

_1_GT_2
	movf INDF0,0,0
	clrf INDF0,0
	movwf PREINC0,0
	clrf PREINC0,0
	return

negate
	comf POSTDEC0,1,0
	negf POSTINC0,0
	movlw 0
	addwfc INDF0,1,0
	return

_2dupxor_GT_w
	movf POSTDEC0,1,0
	movf POSTDEC0,1,0
	movf POSTINC0,0,0
	xorwf PREINC0,0,0
	return

depth
	movff (FSR0L+1),(temp_x1+1)
	movff FSR0L,temp_x1
	movff temp_x1,PREINC0
	movff (temp_x1+1),PREINC0
	movlw LOW((-0x5f))
	movf POSTDEC0,1,0
	addwf POSTINC0,1,0
	movlw HIGH((-0x5f))
	addwfc INDF0,1,0
	rlcf INDF0,0,0
	rrcf POSTDEC0,1,0
	rrcf POSTINC0,1,0
	return

flashc_AT_
	call flash_MI_addr_EX_
	tblrd*+
	movff TABLAT,PREINC0
	clrf PREINC0,0
	return

flash_AT_
	call flash_MI_addr_EX_
	tblrd*+
	movff TABLAT,PREINC0
	clrf PREINC0,0
	tblrd*+
	movff TABLAT,INDF0
	return

eeprom_MI_addr_EX_
	movwf EEADR,0
	bcf EECON1,7,0
	bcf EECON1,6,0
	return

eepromc_AT_
	call eeprom_MI_addr_EX_
	bsf EECON1,0,0
	movf EEDATA,0,0
	return

eeprom_AT_
	call dup
	movf POSTDEC0,0
	movf POSTDEC0,0
	call eepromc_AT_
	movwf PREINC0,0
	clrf PREINC0,0
	call swap
	movf POSTDEC0,0,0
	infsnz POSTINC0,1,0
	incf INDF0,1,0
	movf POSTDEC0,0
	movf POSTDEC0,0
	call eepromc_AT_
	movwf PREINC0,0
	clrf PREINC0,0
	movf POSTDEC0,0,0
	movf POSTDEC0,0,0
	movwf INDF0,0
	return

nibble_MI_to_MI_hex
	addlw 0xf6
	btfsc STATUS,0,0
	addlw 7
	addlw 0x3a
	return

memcpy
	movff FSR2L,temp_x2
	movff FSR2H,(temp_x2+1)
	movff POSTDEC0,FSR2H
	movff POSTDEC0,FSR2L
	movff POSTDEC0,FSR1H
	movff POSTDEC0,FSR1L
memcpy_loop
	movff POSTINC1,POSTINC2
	decfsz WREG,1,0
	bra memcpy_loop
	movff temp_x2,FSR2L
	movff (temp_x2+1),FSR2H
	return

can_MI_receive_MI_buffer0
	movf RXB0DLC,0,0
	andlw 0xf
	movwf PREINC0,0
	clrf PREINC0,0
	call dup
	movf POSTDEC0,0,0
	movff POSTDEC0,can_MI_msg_MI_length
	movf POSTDEC0,0,0
	iorwf POSTDEC0,0,0
	bz _lbl___119
	movlw LOW(RXB0D0)
	movwf PREINC0,0
	movlw HIGH(RXB0D0)
	movwf PREINC0,0
	movlw can_MI_msg
	movwf PREINC0,0
	clrf PREINC0,0
	movf can_MI_msg_MI_length,0,0
	call memcpy
_lbl___119
	clrf can_MI_msg_MI_flags,0
	btfsc RXB0DLC,6,0
	bsf can_MI_msg_MI_flags,0,0
	movff RXB0SIDL,PREINC0
	movff RXB0SIDH,PREINC0
	call _5_GT__GT_
	movff POSTDEC0,(can_MI_arbitration+1)
	movff POSTDEC0,can_MI_arbitration
	bcf RXB0CON,7,0
	return

can_MI_clr_MI_rtr
	movlw LOW(TXB0DLC)
	movwf PREINC0,0
	movlw HIGH(TXB0DLC)
	movwf PREINC0,0
	call tx0_GT_txn
	movff POSTDEC0,FSR1H
	movff POSTDEC0,FSR1L
	bcf INDF1,6,0
	return

can_MI_disable_MI_all_MI_filters
	movlw LOW(0x7ff)
	movwf PREINC0,0
	movlw HIGH(0x7ff)
	movwf PREINC0,0
	movlw 0
	call can_MI_set_MI_mask
	movlw LOW(0x7ff)
	movwf PREINC0,0
	movlw HIGH(0x7ff)
	movwf PREINC0,0
	movlw 1
	call can_MI_set_MI_mask
	movlw 7
	movwf PREINC2,0
_lbl___168
	movlw LOW(0x7ff)
	movwf PREINC0,0
	movlw HIGH(0x7ff)
	movwf PREINC0,0
	movff INDF2,PREINC0
	clrf PREINC0,0
	movlw LOW((-1))
	movf POSTDEC0,1,0
	addwf POSTINC0,1,0
	movlw HIGH((-1))
	addwfc INDF0,1,0
	movf POSTDEC0,0
	movf POSTDEC0,0
	call can_MI_set_MI_filter
	decfsz INDF2,1,0
	bra _lbl___168
	movf POSTDEC2,1,0
	return

key
	btfss PIR1,5,0
	bra key
	movf RCREG,0,0
	return

timer0_MI_reset
	clrf PREINC0,0
	movlw HIGH(0x400)
	movwf PREINC0,0
	call negate
	movff POSTDEC0,(TMR0L+1)
	movff POSTDEC0,TMR0L
	bcf INTCON,2,0
	return

wait_MI_timer0
	call timer0_MI_reset
_lbl___201
	btfsc INTCON,2,0
	return
	bra _lbl___201

select_MI_channel
	call _4_ST_
	call _4_ST_
	movf ADCON0,0,0
	andlw 0xc7
	movwf PREINC0,0
	clrf PREINC0,0
	call or
	movf POSTDEC0,0,0
	movff POSTDEC0,ADCON0
	return

conversion
	bsf ADCON0,2,0
_lbl___208
	btfsc ADCON0,2,0
	bra _lbl___208
	movff ADRESL,PREINC0
	movff (ADRESL+1),PREINC0
	return

_4_MI_measures
	clrf PREINC0,0
	clrf PREINC0,0
	movlw 4
	movwf PREINC2,0
_lbl___211
	call conversion
	call op_plus
	decfsz INDF2,1,0
	bra _lbl___211
	movf POSTDEC2,1,0
	return

brown_MI_detected
	movlw LOW((_data___1+0x8000))
	movwf PREINC0,0
	movlw HIGH((_data___1+0x8000))
	movwf PREINC0,0
	movlw 14
	movwf PREINC0,0
	clrf PREINC0,0
	call type
	call cr
	movlw BROWN
	movwf PREINC0,0
	clrf PREINC0,0
	return

white_MI_detected
	movlw LOW((_data___2+0x8000))
	movwf PREINC0,0
	movlw HIGH((_data___2+0x8000))
	movwf PREINC0,0
	movlw 14
	movwf PREINC0,0
	clrf PREINC0,0
	call type
	call cr
	movlw WHITE
	movwf PREINC0,0
	clrf PREINC0,0
	return

colors_MI_changed_QM_
	clrf PREINC0,0
	clrf PREINC0,0
	movlw 4
	movwf PREINC2,0
_lbl___229
	movff INDF2,PREINC0
	clrf PREINC0,0
	movlw LOW((-1))
	movf POSTDEC0,1,0
	addwf POSTINC0,1,0
	movlw HIGH((-1))
	addwfc INDF0,1,0
	call color_MI_changed_QM_
	movf POSTDEC0,0,0
	iorwf POSTDEC0,0,0
	bz _lbl___230
	movff INDF2,PREINC0
	clrf PREINC0,0
	movlw LOW((-1))
	movf POSTDEC0,1,0
	addwf POSTINC0,1,0
	movlw HIGH((-1))
	addwfc INDF0,1,0
	call update_MI_color
	movf POSTDEC0,0,0
	infsnz POSTINC0,1,0
	incf INDF0,1,0
_lbl___230
	decfsz INDF2,1,0
	bra _lbl___229
	movf POSTDEC2,1,0
	return

serial_MI_dump
	movlw 4
	movwf PREINC2,0
_lbl___261
	movlw LOW((_data___13+0x8000))
	movwf PREINC0,0
	movlw HIGH((_data___13+0x8000))
	movwf PREINC0,0
	movlw 8
	movwf PREINC0,0
	clrf PREINC0,0
	call type
	movff INDF2,PREINC0
	clrf PREINC0,0
	movlw LOW((-1))
	movf POSTDEC0,1,0
	addwf POSTINC0,1,0
	movlw HIGH((-1))
	addwfc INDF0,1,0
	call _DT_
	movlw LOW((_data___14+0x8000))
	movwf PREINC0,0
	movlw HIGH((_data___14+0x8000))
	movwf PREINC0,0
	movlw 2
	movwf PREINC0,0
	clrf PREINC0,0
	call type
	movff INDF2,PREINC0
	clrf PREINC0,0
	movlw LOW((-1))
	movf POSTDEC0,1,0
	addwf POSTINC0,1,0
	movlw HIGH((-1))
	addwfc INDF0,1,0
	movlw LOW(current_MI_colors)
	movf POSTDEC0,1,0
	addwf POSTINC0,1,0
	movlw HIGH(current_MI_colors)
	addwfc INDF0,1,0
	call op_cfetch_tos
	call print_MI_color
	movlw LOW((_data___15+0x8000))
	movwf PREINC0,0
	movlw HIGH((_data___15+0x8000))
	movwf PREINC0,0
	movlw 2
	movwf PREINC0,0
	clrf PREINC0,0
	call type
	movff INDF2,PREINC0
	clrf PREINC0,0
	movlw LOW((-1))
	movf POSTDEC0,1,0
	addwf POSTINC0,1,0
	movlw HIGH((-1))
	addwfc INDF0,1,0
	movlw LOW(current_MI_values)
	movf POSTDEC0,1,0
	addwf POSTINC0,1,0
	movlw HIGH(current_MI_values)
	addwfc INDF0,1,0
	call op_fetch_tos
	call _DT_
	movlw LOW((_data___16+0x8000))
	movwf PREINC0,0
	movlw HIGH((_data___16+0x8000))
	movwf PREINC0,0
	movlw 1
	movwf PREINC0,0
	clrf PREINC0,0
	call type
	call cr
	decfsz INDF2,1,0
	bra _lbl___261
	movf POSTDEC2,1,0
	return

pause
	call key
	movwf PREINC0,0
	clrf PREINC0,0
	movf POSTDEC0,1,0
	movf POSTDEC0,1,0
	return

calibration
	movlw LOW((_data___27+0x8000))
	movwf PREINC0,0
	movlw HIGH((_data___27+0x8000))
	movwf PREINC0,0
	movlw 41
	movwf PREINC0,0
	clrf PREINC0,0
	call type
	call cr
	call pause
	clrf PREINC0,0
	clrf PREINC0,0
	call channel_MI_measure
	movlw LOW((_data___28+0x8000))
	movwf PREINC0,0
	movlw HIGH((_data___28+0x8000))
	movwf PREINC0,0
	movlw 41
	movwf PREINC0,0
	clrf PREINC0,0
	call type
	call cr
	call pause
	clrf PREINC0,0
	clrf PREINC0,0
	call channel_MI_measure
	call dup
	movlw LOW((_data___29+0x8000))
	movwf PREINC0,0
	movlw HIGH((_data___29+0x8000))
	movwf PREINC0,0
	movlw 41
	movwf PREINC0,0
	clrf PREINC0,0
	call type
	call cr
	call pause
	clrf PREINC0,0
	clrf PREINC0,0
	call channel_MI_measure
	call op_plus
	rlcf INDF0,0,0
	rrcf POSTDEC0,1,0
	rrcf POSTINC0,1,0
	call dup
	movlw LOW((_data___30+0x8000))
	movwf PREINC0,0
	movlw HIGH((_data___30+0x8000))
	movwf PREINC0,0
	movlw 12
	movwf PREINC0,0
	clrf PREINC0,0
	call type
	call _DT_
	call cr
	movff POSTDEC0,(cream_MI_white_MI_threshold+1)
	movff POSTDEC0,cream_MI_white_MI_threshold
	call op_plus
	rlcf INDF0,0,0
	rrcf POSTDEC0,1,0
	rrcf POSTINC0,1,0
	call dup
	movlw LOW((_data___31+0x8000))
	movwf PREINC0,0
	movlw HIGH((_data___31+0x8000))
	movwf PREINC0,0
	movlw 12
	movwf PREINC0,0
	clrf PREINC0,0
	call type
	call _DT_
	call cr
	movff POSTDEC0,(brown_MI_cream_MI_threshold+1)
	movff POSTDEC0,brown_MI_cream_MI_threshold
	return

;---------------------------------------------------------
; Section: memory
;---------------------------------------------------------

temp_x1 equ 0x0

temp_x2 equ 0x2

can_MI_msg equ 0x12

can_MI_msg_MI_0 equ 0x12

can_MI_msg_MI_1 equ 0x13

can_MI_msg_MI_2 equ 0x14

can_MI_msg_MI_3 equ 0x15

can_MI_msg_MI_4 equ 0x16

can_MI_msg_MI_6 equ 0x18

can_MI_msg_MI_length equ 0x1a

can_MI_msg_MI_flags equ 0x1b

can_MI_buffer equ 0x1c

can_MI_offset equ 0x1d

can_MI_arbitration equ 0x1e

can_MI_flags equ 0x20

calibrated_QM_ equ 0x100

current_MI_values equ 0x102

current_MI_value_MI_0 equ 0x102

current_MI_value_MI_1 equ 0x104

current_MI_value_MI_2 equ 0x106

current_MI_value_MI_3 equ 0x108

current_MI_colors equ 0x10a

current_MI_color_MI_0 equ 0x10a

current_MI_color_MI_1 equ 0x10b

current_MI_color_MI_2 equ 0x10c

current_MI_color_MI_3 equ 0x10d

previous_MI_colors equ 0x10e

cream_MI_white_MI_threshold_MI_eeprom equ 0x1000

brown_MI_cream_MI_threshold_MI_eeprom equ 0x1002

brown_MI_cream_MI_threshold equ 0x112

cream_MI_white_MI_threshold equ 0x114

;---------------------------------------------------------
; Section: static data
;---------------------------------------------------------

_data___1
	db 98,114,111,119,110,32,100,101
	db 116,101,99,116,101,100

_data___2
	db 119,104,105,116,101,32,100,101
	db 116,101,99,116,101,100

_data___3
	db 99,114,101,97,109,32,100,101
	db 116,101,99,116,101,100

_data___4
	db 85,110,107,110,111,119,110,32
	db 67,65,78,32,109,101,115,115
	db 97,103,101,32,119,105,116,104
	db 32,97,114,98,105,116,114,97
	db 116,105,111,110,32

_data___5
	db 32,97,110,100,32

_data___6
	db 110,111,32

_data___7
	db 82,84,82

_data___8
	db 117,110,107,110,111,119,110

_data___9
	db 99,114,101,97,109

_data___10
	db 98,114,111,119,110

_data___11
	db 119,104,105,116,101

_data___12
	db 60,105,110,116,101,114,110,97
	db 108,32,101,114,114,111,114,62

_data___13
	db 67,104,97,110,110,101,108,32

_data___14
	db 58,32

_data___15
	db 32,40

_data___16
	db 41

_data___17
	db 85,115,97,103,101,58

_data___18
	db 32,32,32,115,32,32,32,32
	db 32,32,32,32,32,32,32,32
	db 32,32,32,101,120,101,99,117
	db 116,101,32,115,116,101,112

_data___19
	db 32,32,32,48,46,46,46,51
	db 32,32,32,32,32,32,32,32
	db 32,32,32,112,114,105,110,116
	db 32,65,47,68,32,118,97,108
	db 117,101,32,102,111,114,32,99
	db 104,97,110,110,101,108,32,120

_data___20
	db 32,32,32,100,32,32,32,32
	db 32,32,32,32,32,32,32,32
	db 32,32,32,112,114,105,110,116
	db 32,115,116,97,99,107,39,115
	db 32,100,101,112,116,104

_data___21
	db 32,32,32,76,32,32,32,32
	db 32,32,32,32,32,32,32,32
	db 32,32,32,116,111,103,103,108
	db 101,32,116,104,101,32,115,101
	db 110,115,111,114,115,39,32,108
	db 101,100,115

_data___22
	db 32,32,32,108,32,32,32,32
	db 32,32,32,32,32,32,32,32
	db 32,32,32,67,65,78,32,108
	db 111,111,112,98,97,99,107,32
	db 109,111,100,101,32,111,110

_data___23
	db 32,32,32,107,32,32,32,32
	db 32,32,32,32,32,32,32,32
	db 32,32,32,67,65,78,32,108
	db 111,111,112,98,97,99,107,32
	db 111,102,102

_data___24
	db 32,32,32,114,32,32,32,32
	db 32,32,32,32,32,32,32,32
	db 32,32,32,83,101,110,100,32
	db 97,32,67,65,78,32,99,111
	db 109,109,97,110,100,32,116,111
	db 32,114,101,113,117,101,115,116
	db 32,118,97,108,117,101,115

_data___25
	db 32,32,32,99,32,32,32,32
	db 32,32,32,32,32,32,32,32
	db 32,32,32,83,101,110,100,32
	db 97,32,67,65,78,32,99,111
	db 109,109,97,110,100,32,116,111
	db 32,114,101,113,117,101,115,116
	db 32,99,111,108,111,114,32,118
	db 97,108,117,101,115

_data___26
	db 32,32,32,113,32,32,32,32
	db 32,32,32,82,101,99,97,108
	db 105,98,114,97,116,101

_data___27
	db 83,101,110,115,111,114,115,32
	db 111,110,32,66,82,79,87,78
	db 32,40,112,114,101,115,115,32
	db 97,32,107,101,121,32,119,104
	db 101,110,32,114,101,97,100,121
	db 41

_data___28
	db 83,101,110,115,111,114,115,32
	db 111,110,32,67,82,69,65,77
	db 32,40,112,114,101,115,115,32
	db 97,32,107,101,121,32,119,104
	db 101,110,32,114,101,97,100,121
	db 41

_data___29
	db 83,101,110,115,111,114,115,32
	db 111,110,32,87,72,73,84,69
	db 32,40,112,114,101,115,115,32
	db 97,32,107,101,121,32,119,104
	db 101,110,32,114,101,97,100,121
	db 41

_data___30
	db 99,114,101,97,109,45,119,104
	db 105,116,101,61

_data___31
	db 98,114,111,119,110,45,99,114
	db 101,97,109,61

_data___32
	db 67,104,97,110,110,101,108,48
	db 32,58,32

_data___33
	db 67,104,97,110,110,101,108,49
	db 32,58,32

_data___34
	db 67,104,97,110,110,101,108,50
	db 32,58,32

_data___35
	db 67,104,97,110,110,101,108,51
	db 32,58,32

_data___36
	db 67,97,108,105,98,114,97,116
	db 105,111,110,32

_data___37
	db 83,116,97,99,107,39,115,32
	db 100,101,112,116,104,32,58,32

_data___38
	db 76,111,111,112,98,97,99,107
	db 32,111,110

_data___39
	db 76,111,111,112,98,97,99,107
	db 32,111,102,102

_data___40
	db 83,101,110,115,111,114,115,39
	db 32,108,101,100,115,32,116,111
	db 103,103,108,101,100

_data___41
	db 87,101,108,99,111,109,101,32
	db 116,111,32,116,104,101,32,115
	db 101,110,115,111,114,115,32,112
	db 114,111,103,114,97,109

END
