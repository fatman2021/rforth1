	processor pic18f248
	radix dec
	org 0x2000
	goto init_runtime

;---------------------------------------------------------
; Section: constants
;---------------------------------------------------------

; TBLPTRU: defined at lib/sfrnames.fs:13
TBLPTRU equ 0xff8

; TBLPTRH: defined at lib/sfrnames.fs:14
TBLPTRH equ 0xff7

; TBLPTRL: defined at lib/sfrnames.fs:15
TBLPTRL equ 0xff6

; TABLAT: defined at lib/sfrnames.fs:16
TABLAT equ 0xff5

; INTCON: defined at lib/sfrnames.fs:19
INTCON equ 0xff2

; INDF0: defined at lib/sfrnames.fs:23
INDF0 equ 0xfef

; POSTINC0: defined at lib/sfrnames.fs:24
POSTINC0 equ 0xfee

; POSTDEC0: defined at lib/sfrnames.fs:25
POSTDEC0 equ 0xfed

; PREINC0: defined at lib/sfrnames.fs:26
PREINC0 equ 0xfec

; PLUSW0: defined at lib/sfrnames.fs:27
PLUSW0 equ 0xfeb

; FSR0H: defined at lib/sfrnames.fs:28
FSR0H equ 0xfea

; FSR0L: defined at lib/sfrnames.fs:29
FSR0L equ 0xfe9

; WREG: defined at lib/sfrnames.fs:30
WREG equ 0xfe8

; INDF1: defined at lib/sfrnames.fs:31
INDF1 equ 0xfe7

; POSTINC1: defined at lib/sfrnames.fs:32
POSTINC1 equ 0xfe6

; FSR1H: defined at lib/sfrnames.fs:36
FSR1H equ 0xfe2

; FSR1L: defined at lib/sfrnames.fs:37
FSR1L equ 0xfe1

; INDF2: defined at lib/sfrnames.fs:39
INDF2 equ 0xfdf

; POSTDEC2: defined at lib/sfrnames.fs:41
POSTDEC2 equ 0xfdd

; PREINC2: defined at lib/sfrnames.fs:42
PREINC2 equ 0xfdc

; FSR2H: defined at lib/sfrnames.fs:44
FSR2H equ 0xfda

; FSR2L: defined at lib/sfrnames.fs:45
FSR2L equ 0xfd9

; STATUS: defined at lib/sfrnames.fs:46
STATUS equ 0xfd8

; TMR0H: defined at lib/sfrnames.fs:47
TMR0H equ 0xfd7

; TMR0L: defined at lib/sfrnames.fs:48
TMR0L equ 0xfd6

; T0CON: defined at lib/sfrnames.fs:49
T0CON equ 0xfd5

; ADCON0: defined at lib/sfrnames.fs:68
ADCON0 equ 0xfc2

; TMR3H: defined at lib/sfrnames.fs:80
TMR3H equ 0xfb3

; TMR3L: defined at lib/sfrnames.fs:81
TMR3L equ 0xfb2

; T3CON: defined at lib/sfrnames.fs:82
T3CON equ 0xfb1

; RCREG: defined at lib/sfrnames.fs:85
RCREG equ 0xfae

; TXREG: defined at lib/sfrnames.fs:86
TXREG equ 0xfad

; EEADR: defined at lib/sfrnames.fs:89
EEADR equ 0xfa9

; EEDATA: defined at lib/sfrnames.fs:90
EEDATA equ 0xfa8

; EECON1: defined at lib/sfrnames.fs:92
EECON1 equ 0xfa6

; PIR2: defined at lib/sfrnames.fs:97
PIR2 equ 0xfa1

; PIR1: defined at lib/sfrnames.fs:100
PIR1 equ 0xf9e

; TRISC: defined at lib/sfrnames.fs:104
TRISC equ 0xf94

; TRISB: defined at lib/sfrnames.fs:105
TRISB equ 0xf93

; TRISA: defined at lib/sfrnames.fs:106
TRISA equ 0xf92

; LATC: defined at lib/sfrnames.fs:109
LATC equ 0xf8b

; LATB: defined at lib/sfrnames.fs:110
LATB equ 0xf8a

; LATA: defined at lib/sfrnames.fs:111
LATA equ 0xf89

; CIOCON: defined at lib/sfrnames.fs:120
CIOCON equ 0xf73

; BRGCON3: defined at lib/sfrnames.fs:121
BRGCON3 equ 0xf72

; BRGCON2: defined at lib/sfrnames.fs:122
BRGCON2 equ 0xf71

; BRGCON1: defined at lib/sfrnames.fs:123
BRGCON1 equ 0xf70

; CANCON: defined at lib/sfrnames.fs:124
CANCON equ 0xf6f

; RXB0D4: defined at lib/sfrnames.fs:129
RXB0D4 equ 0xf6a

; RXB0D3: defined at lib/sfrnames.fs:130
RXB0D3 equ 0xf69

; RXB0D2: defined at lib/sfrnames.fs:131
RXB0D2 equ 0xf68

; RXB0D1: defined at lib/sfrnames.fs:132
RXB0D1 equ 0xf67

; RXB0D0: defined at lib/sfrnames.fs:133
RXB0D0 equ 0xf66

; RXB0SIDL: defined at lib/sfrnames.fs:137
RXB0SIDL equ 0xf62

; RXB0SIDH: defined at lib/sfrnames.fs:138
RXB0SIDH equ 0xf61

; RXB0CON: defined at lib/sfrnames.fs:139
RXB0CON equ 0xf60

; TXB0D4: defined at lib/sfrnames.fs:159
TXB0D4 equ 0xf4a

; TXB0D3: defined at lib/sfrnames.fs:160
TXB0D3 equ 0xf49

; TXB0D2: defined at lib/sfrnames.fs:161
TXB0D2 equ 0xf48

; TXB0D1: defined at lib/sfrnames.fs:162
TXB0D1 equ 0xf47

; TXB0D0: defined at lib/sfrnames.fs:163
TXB0D0 equ 0xf46

; TXB0DLC: defined at lib/sfrnames.fs:164
TXB0DLC equ 0xf45

; TXB0EIDL: defined at lib/sfrnames.fs:165
TXB0EIDL equ 0xf44

; TXB0EIDH: defined at lib/sfrnames.fs:166
TXB0EIDH equ 0xf43

; TXB0SIDL: defined at lib/sfrnames.fs:167
TXB0SIDL equ 0xf42

; TXB0SIDH: defined at lib/sfrnames.fs:168
TXB0SIDH equ 0xf41

; TXB0CON: defined at lib/sfrnames.fs:169
TXB0CON equ 0xf40

; RXM0EIDL: defined at lib/sfrnames.fs:204
RXM0EIDL equ 0xf1b

; RXM0EIDH: defined at lib/sfrnames.fs:205
RXM0EIDH equ 0xf1a

; RXM0SIDL: defined at lib/sfrnames.fs:206
RXM0SIDL equ 0xf19

; RXM0SIDH: defined at lib/sfrnames.fs:207
RXM0SIDH equ 0xf18

; RXF1EIDL: defined at lib/sfrnames.fs:224
RXF1EIDL equ 0xf07

; RXF1EIDH: defined at lib/sfrnames.fs:225
RXF1EIDH equ 0xf06

; RXF1SIDL: defined at lib/sfrnames.fs:226
RXF1SIDL equ 0xf05

; RXF1SIDH: defined at lib/sfrnames.fs:227
RXF1SIDH equ 0xf04

; RXF0EIDL: defined at lib/sfrnames.fs:228
RXF0EIDL equ 0xf03

; RXF0EIDH: defined at lib/sfrnames.fs:229
RXF0EIDH equ 0xf02

; RXF0SIDL: defined at lib/sfrnames.fs:230
RXF0SIDL equ 0xf01

; RXF0SIDH: defined at lib/sfrnames.fs:231
RXF0SIDH equ 0xf00

; can_BRGCON1: defined at lib/can.fs:5
can_BRGCON1 equ 0x9

; can_BRGCON2: defined at lib/can.fs:6
can_BRGCON2 equ 0x90

; can_BRGCON3: defined at lib/can.fs:7
can_BRGCON3 equ 0x2

; can_CIOCON: defined at lib/can.fs:8
can_CIOCON equ 0x40

; can_RXM0SIDH: defined at lib/can.fs:11
can_RXM0SIDH equ 0x0

; can_RXM0SIDL: defined at lib/can.fs:12
can_RXM0SIDL equ 0x0

; can_RXM0EIDH: defined at lib/can.fs:13
can_RXM0EIDH equ 0x0

; can_RXM0EIDL: defined at lib/can.fs:14
can_RXM0EIDL equ 0x0

; can_RXF0SIDH: defined at lib/can.fs:17
can_RXF0SIDH equ 0x0

; can_RXF0SIDL: defined at lib/can.fs:18
can_RXF0SIDL equ 0x0

; can_RXF0EIDH: defined at lib/can.fs:19
can_RXF0EIDH equ 0x0

; can_RXF0EIDL: defined at lib/can.fs:20
can_RXF0EIDL equ 0x0

; addr_mask: defined at tests/can-commande.fs:17
addr_mask equ 0x7c00

; private_mask: defined at tests/can-commande.fs:18
private_mask equ 0x3e0

; local_addr: defined at tests/can-commande.fs:19
local_addr equ 0x2000

; forth_mask: defined at tests/can-commande.fs:21
forth_mask equ 0xe0

; back_mask: defined at tests/can-commande.fs:22
back_mask equ 0xc0

; free_mask: defined at tests/can-commande.fs:23
free_mask equ 0x0

; stop_mask: defined at tests/can-commande.fs:24
stop_mask equ 0x80

; TRISB_setup: defined at tests/commande.fs:21
TRISB_setup equ 0xf9

; TRISC_setup: defined at tests/commande.fs:22
TRISC_setup equ 0x9c

; TRISA_setup: defined at tests/commande.fs:23
TRISA_setup equ 0xf1

;---------------------------------------------------------
; Section: code
;---------------------------------------------------------

; handle-can: defined at tests/can-commande.fs:125
handle_MI_can
	movlw -1
	btfss RXB0CON,7,0
	addlw 1
	movwf PREINC0,0
	movwf PREINC0,0
	movf POSTDEC0,0,0
	iorwf POSTDEC0,0,0
	bz _lbl___232
	call read_MI_identifier
	call handle_MI_message
	call free_MI_buffer
_lbl___232
	call key_QM_
	movf POSTDEC0,0,0
	iorwf POSTDEC0,0,0
	btfsc STATUS,2,0
	return

; handle-key: defined at tests/can-commande.fs:104
handle_MI_key
	call key
	call dup
	movlw 100
	movwf PREINC0,0
	clrf PREINC0,0
	call xor
	call op_zeroeq
	movf POSTDEC0,0,0
	iorwf POSTDEC0,0,0
	bz _lbl___209
	movf POSTDEC0,1,0
	movf POSTDEC0,1,0
	movlw LOW((_data___5+0x8000))
	movwf PREINC0,0
	movlw HIGH((_data___5+0x8000))
	movwf PREINC0,0
	movlw 2
	movwf PREINC0,0
	clrf PREINC0,0
	call type
	movff v,PREINC0
	movff (v+1),PREINC0
	call _DT_
	goto cr
_lbl___209
	call dup
	movlw 49
	movwf PREINC0,0
	clrf PREINC0,0
	call xor
	call op_zeroeq
	movf POSTDEC0,0,0
	iorwf POSTDEC0,0,0
	bz _lbl___211
	movf POSTDEC0,1,0
	movf POSTDEC0,1,0
	movlw LOW((_data___1+0x8000))
	movwf PREINC0,0
	movlw HIGH((_data___1+0x8000))
	movwf PREINC0,0
	movlw 9
	movwf PREINC0,0
	clrf PREINC0,0
	call type
	call cr
	clrf PREINC0,0
	movlw HIGH(local_addr)
	movwf PREINC0,0
	movlw stop_mask
	movwf PREINC0,0
	clrf PREINC0,0
	call or
	goto emit0
_lbl___211
	call dup
	movlw 50
	movwf PREINC0,0
	clrf PREINC0,0
	call xor
	call op_zeroeq
	movf POSTDEC0,0,0
	iorwf POSTDEC0,0,0
	bz _lbl___214
	movf POSTDEC0,1,0
	movf POSTDEC0,1,0
	movlw LOW((_data___2+0x8000))
	movwf PREINC0,0
	movlw HIGH((_data___2+0x8000))
	movwf PREINC0,0
	movlw 9
	movwf PREINC0,0
	clrf PREINC0,0
	call type
	call cr
	clrf PREINC0,0
	movlw HIGH(local_addr)
	movwf PREINC0,0
	clrf PREINC0,0
	clrf PREINC0,0
	call or
	goto emit0
_lbl___214
	call dup
	movlw 51
	movwf PREINC0,0
	clrf PREINC0,0
	call xor
	call op_zeroeq
	movf POSTDEC0,0,0
	iorwf POSTDEC0,0,0
	bz _lbl___217
	movf POSTDEC0,1,0
	movf POSTDEC0,1,0
	movlw LOW((_data___3+0x8000))
	movwf PREINC0,0
	movlw HIGH((_data___3+0x8000))
	movwf PREINC0,0
	movlw 10
	movwf PREINC0,0
	clrf PREINC0,0
	call type
	call cr
	clrf PREINC0,0
	movlw HIGH(local_addr)
	movwf PREINC0,0
	movlw forth_mask
	movwf PREINC0,0
	clrf PREINC0,0
	call or
	movlw 8
	movwf PREINC0,0
	clrf PREINC0,0
	call read16
	call dup
	call _DT_
	movlw 50
	movwf PREINC0,0
	clrf PREINC0,0
	movlw 8
	movwf PREINC0,0
	clrf PREINC0,0
	goto emit5
_lbl___217
	movlw 52
	movwf PREINC0,0
	clrf PREINC0,0
	call xor
	call op_zeroeq
	movf POSTDEC0,0,0
	iorwf POSTDEC0,0,0
	bz _lbl___220
	movlw LOW((_data___4+0x8000))
	movwf PREINC0,0
	movlw HIGH((_data___4+0x8000))
	movwf PREINC0,0
	movlw 9
	movwf PREINC0,0
	clrf PREINC0,0
	call type
	call cr
	clrf PREINC0,0
	movlw HIGH(local_addr)
	movwf PREINC0,0
	movlw back_mask
	movwf PREINC0,0
	clrf PREINC0,0
	call or
	movlw 8
	movwf PREINC0,0
	clrf PREINC0,0
	call read16
	call dup
	call _DT_
	movlw 50
	movwf PREINC0,0
	clrf PREINC0,0
	movlw 8
	movwf PREINC0,0
	clrf PREINC0,0
	goto emit5
_lbl___220
	call depth
	call _DT_

; cr: defined at lib/strings.fs:8
cr
	movlw 0xa
	movwf PREINC0,0
	clrf PREINC0,0
	call emit
	movlw 0xd
	movwf PREINC0,0
	clrf PREINC0,0

; emit: defined at tests/commande.fs:99
emit
	call timers_MI_reached
	btfss PIR1,4,0
	bra emit
	movf POSTDEC0,0,0
	movff POSTDEC0,TXREG
	return

; accelerate: defined at tests/commande.fs:66
accelerate
	movff acc,PREINC0
	clrf PREINC0,0
	movlw LOW(v)
	movwf PREINC0,0
	movlw HIGH(v)
	movwf PREINC0,0

; +!: defined at lib/arithmetic.fs:18
_PL__EX_
	movff POSTDEC0,FSR1H
	movff POSTDEC0,FSR1L
	movf POSTDEC0,0,0
	movf POSTINC0,0,0
	addwf POSTINC1,1,0
	movf POSTDEC0,0,0
	addwfc INDF1,1,0
	movf POSTDEC0,0,0
	return

; /32: defined at lib/math.fs:111
_SL_32
	bcf math_MI_flags,0,0
	call normalize_MI_tos_MI_2
	movff POSTDEC0,(temp_l+1)
	movff POSTDEC0,temp_l
	movff POSTDEC0,(temp_e+1)
	movff POSTDEC0,temp_e
	movff POSTDEC0,(temp_w+1)
	movff POSTDEC0,temp_w
	call div32
	movff temp_w,PREINC0
	movff (temp_w+1),PREINC0

; apply-sign: defined at lib/math.fs:93
apply_MI_sign
	btfss math_MI_flags,0,0
	return

; negate: defined at lib/arithmetic.fs:132
negate
	comf POSTDEC0,1,0
	negf POSTINC0,0
	movlw 0
	addwfc INDF0,1,0
	return

; accelerate?: defined at tests/commande.fs:63
accelerate_QM_
	call vmax_MI_reached_QM_
	call op_zeroeq
	call tvmax_MI_not_MI_elapsed_QM_

; and: defined at lib/arithmetic.fs:63
and
	movff POSTDEC0,temp_x1
	movf POSTDEC0,0,0
	movf POSTDEC0,1,0
	andwf POSTINC0,1,0
	movf temp_x1,0,0
	andwf INDF0,1,0
	return

; vmax-reached?: defined at tests/commande.fs:61
vmax_MI_reached_QM_
	movff vmax,PREINC0
	movff (vmax+1),PREINC0
	movff v,PREINC0
	movff (v+1),PREINC0

; <=: defined at lib/arithmetic.fs:184
_LT__EQ_
	call swap

; >=: defined at lib/arithmetic.fs:175
_GT__EQ_
	call _2dupxor_GT_w
	btfss WREG,7,0
	bra _lbl___26
	movf POSTDEC0,1,0
	movf POSTDEC0,1,0
	call _0_LT_
	goto op_zeroeq
_lbl___26
	call op_minus
	call _0_LT_

; op_zeroeq: defined at lib/primitives.fs:70
op_zeroeq
	movf POSTDEC0,0,0
	iorwf POSTDEC0,0,0

; op_zeroeq_z: defined at lib/primitives.fs:61
op_zeroeq_z
	movlw -1
	btfss STATUS,2,0
	addlw 1
	movwf PREINC0,0
	movwf PREINC0,0
	return

; tvmax-not-elapsed?: defined at tests/commande.fs:62
tvmax_MI_not_MI_elapsed_QM_
	movff tvmax,PREINC0
	clrf PREINC0,0
	clrf PREINC0,0
	clrf PREINC0,0

; >: defined at lib/arithmetic.fs:183
_GT_
	call swap

; <: defined at lib/arithmetic.fs:167
_LT_
	call _2dupxor_GT_w
	btfss WREG,7,0
	bra _lbl___22
	movf POSTDEC0,1,0
	movf POSTDEC0,1,0
	goto _0_LT_
_lbl___22
	call op_minus

; 0<: defined at lib/arithmetic.fs:140
_0_LT_
	movlw -1
	btfss POSTDEC0,7,0
	movlw 0
	movwf POSTINC0,0
	movwf INDF0,0
	return

; .: defined at lib/strings.fs:25
_DT_
	call _1_GT_2
	call emit_MI_8

; emit-8: defined at lib/strings.fs:24
emit_MI_8
	call dup
	movf POSTDEC0,0,0
	swapf POSTINC0,1,0
	movlw 0xf
	movwf PREINC0,0
	clrf PREINC0,0
	call and
	call emit_MI_4
	movlw 0xf
	movwf PREINC0,0
	clrf PREINC0,0
	call and

; emit-4: defined at lib/strings.fs:23
emit_MI_4
	call nibble_MI_to_MI_hex
	movwf PREINC0,0
	clrf PREINC0,0
	goto emit

; timers-reached: defined at tests/commande.fs:97
timers_MI_reached
	call timer0_MI_reached

; timer3-reached: defined at tests/commande.fs:91
timer3_MI_reached
	btfss PIR2,1,0
	return
	call timer3_MI_reset
	bcf PIR2,1,0

; do-step: defined at tests/commande.fs:73
do_MI_step
	movff working,PREINC0
	clrf PREINC0,0
	movf POSTDEC0,0,0
	iorwf POSTDEC0,0,0
	btfsc STATUS,2,0
	return
	bsf LATC,1,0
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	bcf LATC,1,0
	return

; read8: defined at lib/strings.fs:69
read8
	call read4
	movf POSTDEC0,0,0
	swapf POSTINC0,1,0
	call read4

; or: defined at lib/arithmetic.fs:75
or
	movff POSTDEC0,temp_x1
	movf POSTDEC0,0,0
	movf POSTDEC0,1,0
	iorwf POSTINC0,1,0
	movf temp_x1,0,0
	iorwf INDF0,1,0
	return

; table-addr!: defined at lib/tables.fs:1
table_MI_addr_EX_
	clrf TBLPTRU,0
	call _1_GT_2
	movf POSTDEC0,0,0
	movff POSTDEC0,TBLPTRH
	movf POSTDEC0,0,0
	movff POSTDEC0,TBLPTRL
	bcf EECON1,6,0
	return

; can-setup: defined at tests/can-commande.fs:32
can_MI_setup
	call can_init
	clrf PREINC0,0
	movlw HIGH(addr_mask)
	movwf PREINC0,0
	clrf PREINC0,0
	movlw HIGH(local_addr)
	movwf PREINC0,0
	call can_set_mask

; can_loopback: defined at lib/can.fs:71
can_loopback
	bsf CANCON,6,0
	return

; timer0-reached: defined at tests/commande.fs:95
timer0_MI_reached
	btfss INTCON,2,0
	return
	call timer0_MI_reset
	bcf INTCON,2,0

; control: defined at tests/commande.fs:78
control
	btg LATC,5,0
	call accelerate_QM_
	movf POSTDEC0,0,0
	iorwf POSTDEC0,0,0
	btfss STATUS,2,0
	goto accelerate
	call constant_MI_speed_QM_
	movf POSTDEC0,0,0
	iorwf POSTDEC0,0,0
	btfss STATUS,2,0
	goto constant_MI_speed
	movff v,PREINC0
	movff (v+1),PREINC0
	call negate
	call _0_LT_
	movf POSTDEC0,0,0
	iorwf POSTDEC0,0,0
	btfss STATUS,2,0
	goto deccelerate
	call null_MI_speed
	clrf working,1
	return

; init: defined at tests/commande.fs:120
init
	movlw TRISB_setup
	movwf TRISB,0
	movlw TRISC_setup
	movwf TRISC,0
	movlw TRISA_setup
	movwf TRISA,0
	movlw 0x6
	movwf ADCON0,0
	bcf LATA,3,0
	bsf LATA,2,0
	bcf LATC,0,0
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	bsf LATC,0,0
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	bsf LATB,1,0
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	call init_MI_variables

; init-timers: defined at tests/commande.fs:103
init_MI_timers
	movlw 0x83
	movwf T0CON,0
	movlw 0x81
	movwf T3CON,0
	return

; init_runtime: defined at lib/primitives.fs:3
init_runtime
	movlb 1
	clrf acc,1
	clrf (acc+1),1
	clrf dec,1
	clrf (dec+1),1
	clrf vmax,1
	clrf (vmax+1),1
	clrf tvmax,1
	clrf (tvmax+1),1
	clrf v,1
	clrf (v+1),1
	clrf working,1
	clrf (working+1),1
	movlw 0x5f
	movwf FSR0L,0
	clrf FSR0H,0
	movlw 0xbf
	movwf FSR2L,0
	clrf FSR2H,0

; main: defined at tests/commande.fs:152
main
	call init
	call can_MI_setup
	call greetings
_lbl___288
	call handle_MI_can
	call timer0_MI_reached
	call timer3_MI_reached
	bra _lbl___288

; normalize-tos: defined at lib/math.fs:90
normalize_MI_tos
	call dup
	call _0_LT_
	movf POSTDEC0,0,0
	iorwf POSTDEC0,0,0
	btfsc STATUS,2,0
	return
	btg math_MI_flags,0,0
	goto negate

; flash-addr!: defined at lib/tables.fs:3
flash_MI_addr_EX_
	bcf INDF0,7,0
	bsf EECON1,7,0
	bra table_MI_addr_EX_

; read-payload: defined at tests/can-commande.fs:52
read_MI_payload
	movff RXB0D0,acc
	movff RXB0D1,vmax
	movff RXB0D2,(vmax+1)
	movff RXB0D3,tvmax
	movff RXB0D4,dec
	movff acc,PREINC0
	clrf PREINC0,0
	call _DT_
	call cr
	movff vmax,PREINC0
	movff (vmax+1),PREINC0
	call _DT_
	call cr
	movff tvmax,PREINC0
	clrf PREINC0,0
	call _DT_
	call cr
	movff dec,PREINC0
	clrf PREINC0,0
	call _DT_
	goto cr

; handle-message: defined at tests/can-commande.fs:114
handle_MI_message
	movlw LOW((_data___6+0x8000))
	movwf PREINC0,0
	movlw HIGH((_data___6+0x8000))
	movwf PREINC0,0
	movlw 16
	movwf PREINC0,0
	clrf PREINC0,0
	call type
	call cr
	call dup
	call _DT_
	movlw LOW(private_mask)
	movwf PREINC0,0
	movlw HIGH(private_mask)
	movwf PREINC0,0
	call and
	call dup
	movlw forth_mask
	movwf PREINC0,0
	clrf PREINC0,0
	call xor
	call op_zeroeq
	movf POSTDEC0,0,0
	iorwf POSTDEC0,0,0
	bz _lbl___224
	movf POSTDEC0,1,0
	movf POSTDEC0,1,0
	goto handle_MI_forth
_lbl___224
	call dup
	movlw back_mask
	movwf PREINC0,0
	clrf PREINC0,0
	call xor
	call op_zeroeq
	movf POSTDEC0,0,0
	iorwf POSTDEC0,0,0
	bz _lbl___226
	movf POSTDEC0,1,0
	movf POSTDEC0,1,0
	goto handle_MI_back
_lbl___226
	call dup
	movf POSTDEC0,0,0
	iorwf POSTDEC0,0,0
	bnz _lbl___227
	movf POSTDEC0,1,0
	movf POSTDEC0,1,0
	goto handle_MI_free
_lbl___227
	movlw stop_mask
	movwf PREINC0,0
	clrf PREINC0,0
	call xor
	call op_zeroeq
	movf POSTDEC0,0,0
	iorwf POSTDEC0,0,0
	btfss STATUS,2,0
	goto handle_MI_stop
	movlw LOW((_data___7+0x8000))
	movwf PREINC0,0
	movlw HIGH((_data___7+0x8000))
	movwf PREINC0,0
	movlw 15
	movwf PREINC0,0
	clrf PREINC0,0
	call type
	goto cr

; v-to-timer: defined at tests/commande.fs:59
v_MI_to_MI_timer
	movff v,PREINC0
	movff (v+1),PREINC0
	call _0_LT_
	movf POSTDEC0,0,0
	iorwf POSTDEC0,0,0
	bz _lbl___239
	clrf PREINC0,0
	clrf PREINC0,0
	return
_lbl___239
	movlw LOW(16960)
	movwf PREINC0,0
	movlw HIGH(16960)
	movwf PREINC0,0
	movlw 15
	movwf PREINC0,0
	clrf PREINC0,0
	movff v,PREINC0
	movff (v+1),PREINC0
	call _SL_32
	goto negate

; constant-speed?: defined at tests/commande.fs:64
constant_MI_speed_QM_
	call vmax_MI_reached_QM_
	call tvmax_MI_not_MI_elapsed_QM_
	goto and

; deccelerate: defined at tests/commande.fs:67
deccelerate
	movff dec,PREINC0
	clrf PREINC0,0
	call negate
	movlw LOW(v)
	movwf PREINC0,0
	movlw HIGH(v)
	movwf PREINC0,0
	goto _PL__EX_

; dec-tvmax: defined at tests/commande.fs:68
dec_MI_tvmax
	movlw 1
	movwf PREINC0,0
	clrf PREINC0,0
	call negate
	movlw LOW(tvmax)
	movwf PREINC0,0
	movlw HIGH(tvmax)
	movwf PREINC0,0
	goto _PL__EX_

; greetings: defined at tests/commande.fs:146
greetings
	btg LATC,5,0
	movlw LOW((_data___12+0x8000))
	movwf PREINC0,0
	movlw HIGH((_data___12+0x8000))
	movwf PREINC0,0
	movlw 35
	movwf PREINC0,0
	clrf PREINC0,0
	call type
	goto cr

; dup: defined at lib/primitives.fs:29
dup
	movlw -1
	movff PLUSW0,PREINC0
	movff PLUSW0,PREINC0
	return

; op_cfetch_tos: defined at lib/primitives.fs:197
op_cfetch_tos
	btfsc INDF0,7,0
	goto flashc_AT_
	btfsc INDF0,4,0
	goto eepromc_AT_
	movff POSTDEC0,FSR1H
	movff POSTDEC0,FSR1L
	movff INDF1,PREINC0
	clrf PREINC0,0
	return

; swap: defined at lib/primitives.fs:241
swap
	movff POSTDEC0,(temp_x1+1)
	movff POSTDEC0,temp_x1
	movff POSTDEC0,PREINC2
	movff POSTDEC0,PREINC2
	movff temp_x1,PREINC0
	movff (temp_x1+1),PREINC0
	movff POSTDEC2,PREINC0
	movff POSTDEC2,PREINC0
	return

; 2drop: defined at lib/primitives.fs:243
_2drop
	movf POSTDEC0,1,0
	movf POSTDEC0,1,0
	movf POSTDEC0,1,0
	movf POSTDEC0,1,0
	return

; op_minus: defined at lib/arithmetic.fs:39
op_minus
	movff POSTDEC0,temp_x1
	movf POSTDEC0,0,0
	movf POSTDEC0,1,0
	subwf POSTINC0,1,0
	movf temp_x1,0,0
	subwfb INDF0,1,0
	return

; xor: defined at lib/arithmetic.fs:87
xor
	movff POSTDEC0,temp_x1
	movf POSTDEC0,0,0
	movf POSTDEC0,1,0
	xorwf POSTINC0,1,0
	movf temp_x1,0,0
	xorwf INDF0,1,0
	return

; 1>2: defined at lib/arithmetic.fs:106
_1_GT_2
	movf INDF0,0,0
	clrf INDF0,0
	movwf PREINC0,0
	clrf PREINC0,0
	return

; 2dupxor>w: defined at lib/arithmetic.fs:159
_2dupxor_GT_w
	movf POSTDEC0,1,0
	movf POSTDEC0,1,0
	movf POSTINC0,0,0
	xorwf PREINC0,0,0
	return

; depth: defined at lib/arithmetic.fs:236
depth
	movff (FSR0L+1),(temp_x1+1)
	movff FSR0L,temp_x1
	movff temp_x1,PREINC0
	movff (temp_x1+1),PREINC0
	movlw LOW((-0x5f))
	movf POSTDEC0,1,0
	addwf POSTINC0,1,0
	movlw HIGH((-0x5f))
	addwfc INDF0,1,0
	rlcf INDF0,0,0
	rrcf POSTDEC0,1,0
	rrcf POSTINC0,1,0
	return

; div32: defined at lib/math.fs:40
div32
	clrf temp_c0,0
	clrf temp_c1,0
	clrf temp_c2,0
	movlw -32
	movwf temp_c3,0
div322
	bcf STATUS,0,0
	rlcf temp_w,1,0
	rlcf (temp_w+1),1,0
	rlcf temp_e,1,0
	rlcf (temp_e+1),1,0
	rlcf temp_c2,1,0
	rlcf temp_c1,1,0
	rlcf temp_c0,1,0
	movf temp_l,0,0
	subwf temp_c2,1,0
	movf (temp_l+1),0,0
	subwfb temp_c1,0,0
	bc div324
	tstfsz temp_c0,0
	bra div323
	movf temp_l,0,0
	addwf temp_c2,1,0
	bra div325
div323
	decf temp_c0,1,0
div324
	movwf temp_c1,0
	bsf temp_w,0,0
	btfss temp_c3,4,0
	bra div326
div325
	incfsz temp_c3,1,0
	bra div322
	movff temp_c2,temp_e
	movff temp_c1,(temp_e+1)
	return
div326
	movlw 0xff
	movwf (temp_w+1),0
	movwf temp_w,0
	movwf (temp_e+1),0
	movwf temp_e,0
	return

; normalize-tos-2: defined at lib/math.fs:91
normalize_MI_tos_MI_2
	call normalize_MI_tos
	movff POSTDEC0,PREINC2
	movff POSTDEC0,PREINC2
	call normalize_MI_tos
	movff POSTDEC2,PREINC0
	movff POSTDEC2,PREINC0
	return

; flashc@: defined at lib/tables.fs:14
flashc_AT_
	call flash_MI_addr_EX_
	tblrd*+
	movff TABLAT,PREINC0
	clrf PREINC0,0
	return

; eeprom-addr!: defined at lib/tables.fs:17
eeprom_MI_addr_EX_
	movwf EEADR,0
	bcf EECON1,7,0
	bcf EECON1,6,0
	return

; eepromc@: defined at lib/tables.fs:19
eepromc_AT_
	call eeprom_MI_addr_EX_
	bsf EECON1,0,0
	movf EEDATA,0,0
	return

; nibble-to-hex: defined at lib/strings.fs:11
nibble_MI_to_MI_hex
	movf POSTDEC0,0,0
	movlw 0xf6
	addwf INDF0,1,0
	movlw 0x3a
	btfsc STATUS,0,0
	addlw 7
	addwf POSTDEC0,0,0
	return

; type: defined at lib/strings.fs:27
type
	call dup
	movf POSTDEC0,0,0
	iorwf POSTDEC0,0,0
	btfsc STATUS,2,0
	goto _2drop
	movf POSTDEC0,0
	movf POSTDEC0,0
	movwf PREINC2,0
_lbl___92
	call dup
	call op_cfetch_tos
	call emit
	movf POSTDEC0,0,0
	infsnz POSTINC0,1,0
	incf INDF0,1,0
	decfsz INDF2,1,0
	bra _lbl___92
	movf POSTDEC2,1,0
	movf POSTDEC0,1,0
	movf POSTDEC0,1,0
	return

; read4: defined at lib/strings.fs:68
read4
	call key
	call dup
	movlw 65
	movwf PREINC0,0
	clrf PREINC0,0
	call _GT__EQ_
	movf POSTDEC0,0,0
	iorwf POSTDEC0,0,0
	bz _lbl___99
	movlw 223
	movwf PREINC0,0
	clrf PREINC0,0
	call and
	movlw LOW((-55))
	movf POSTDEC0,1,0
	addwf POSTINC0,1,0
	movlw HIGH((-55))
	addwfc INDF0,1,0
	return
_lbl___99
	movlw LOW((-48))
	movf POSTDEC0,1,0
	addwf POSTINC0,1,0
	movlw HIGH((-48))
	addwfc INDF0,1,0
	return

; read16: defined at lib/strings.fs:70
read16
	call read8
	call read8
	call swap
	movf POSTDEC0,0,0
	movf POSTDEC0,0,0
	movwf INDF0,0
	return

; can_init: defined at lib/can.fs:27
can_init
	bsf TRISB,3,0
	bcf TRISB,2,0
	bsf CANCON,7,0
	movlw can_RXM0SIDH
	movff WREG,RXM0SIDH
	movlw can_RXM0SIDL
	movff WREG,RXM0SIDL
	movlw can_RXM0EIDH
	movff WREG,RXM0EIDH
	movlw can_RXM0EIDL
	movff WREG,RXM0EIDL
	movlw can_RXF0SIDH
	movff WREG,RXF0SIDH
	movlw can_RXF0SIDL
	movff WREG,RXF0SIDL
	movlw can_RXF0EIDH
	movff WREG,RXF0EIDH
	movlw can_RXF0EIDL
	movff WREG,RXF0EIDL
	movlw can_RXF0SIDH
	movff WREG,RXF1SIDH
	movlw can_RXF0SIDL
	movff WREG,RXF1SIDL
	movlw can_RXF0EIDH
	movff WREG,RXF1EIDH
	movlw can_RXF0EIDL
	movff WREG,RXF1EIDL
	movlw can_BRGCON1
	movwf BRGCON1,0
	movlw can_BRGCON2
	movwf BRGCON2,0
	movlw can_BRGCON3
	movwf BRGCON3,0
	movlw can_CIOCON
	movwf CIOCON,0
	movlw 0
	movff WREG,TXB0EIDH
	movlw 0
	movff WREG,TXB0EIDL
	movlw 2
	movff WREG,TXB0DLC
	bcf CANCON,7,0
	bcf CANCON,6,0
	bcf CANCON,5,0
	return

; can_set_mask: defined at lib/can.fs:64
can_set_mask
	bsf CANCON,7,0
	call _1_GT_2
	movf POSTDEC0,0,0
	movff POSTDEC0,RXF0SIDH
	movf POSTDEC0,0,0
	movff POSTDEC0,RXF0SIDL
	call _1_GT_2
	movf POSTDEC0,0,0
	movff POSTDEC0,RXM0SIDH
	movf POSTDEC0,0,0
	movff POSTDEC0,RXM0SIDL
	bcf CANCON,7,0
	return

; set-payload: defined at tests/can-commande.fs:39
set_MI_payload
	movf POSTDEC0,0,0
	movff POSTDEC0,TXB0DLC
	return

; free-buffer: defined at tests/can-commande.fs:43
free_MI_buffer
	bcf RXB0CON,7,0
	return

; read-identifier: defined at tests/can-commande.fs:46
read_MI_identifier
	btfss RXB0CON,7,0
	bra read_MI_identifier
	movff RXB0SIDL,PREINC0
	movff RXB0SIDH,PREINC0
	return

; emit0: defined at tests/can-commande.fs:65
emit0
	clrf PREINC0,0
	clrf PREINC0,0
	call set_MI_payload
_lbl___198
	lfsr 1,TXB0CON
	btfsc INDF1,3,0
	bra _lbl___198
	call _1_GT_2
	movf POSTDEC0,0,0
	movff POSTDEC0,TXB0SIDH
	movf POSTDEC0,0,0
	movff POSTDEC0,TXB0SIDL
	lfsr 1,TXB0CON
	bsf INDF1,3,0
	return

; emit5: defined at tests/can-commande.fs:73
emit5
	movlw 5
	movwf PREINC0,0
	clrf PREINC0,0
	call set_MI_payload
_lbl___201
	lfsr 1,TXB0CON
	btfsc INDF1,3,0
	bra _lbl___201
	movf POSTDEC0,0,0
	movff POSTDEC0,TXB0D4
	movf POSTDEC0,0,0
	movff POSTDEC0,TXB0D3
	call _1_GT_2
	movf POSTDEC0,0,0
	movff POSTDEC0,TXB0D2
	movf POSTDEC0,0,0
	movff POSTDEC0,TXB0D1
	movf POSTDEC0,0,0
	movff POSTDEC0,TXB0D0
	call _1_GT_2
	movf POSTDEC0,0,0
	movff POSTDEC0,TXB0SIDH
	movf POSTDEC0,0,0
	movff POSTDEC0,TXB0SIDL
	lfsr 1,TXB0CON
	bsf INDF1,3,0
	return

; handle-free: defined at tests/commande.fs:29
handle_MI_free
	movlw LOW((_data___8+0x8000))
	movwf PREINC0,0
	movlw HIGH((_data___8+0x8000))
	movwf PREINC0,0
	movlw 13
	movwf PREINC0,0
	clrf PREINC0,0
	call type
	call cr
	clrf working,1
	btg LATB,1,0
	return

; handle-stop: defined at tests/commande.fs:35
handle_MI_stop
	movlw LOW((_data___9+0x8000))
	movwf PREINC0,0
	movlw HIGH((_data___9+0x8000))
	movwf PREINC0,0
	movlw 13
	movwf PREINC0,0
	clrf PREINC0,0
	call type
	call cr
	clrf working,1
	return

; handle-forth: defined at tests/commande.fs:40
handle_MI_forth
	movlw LOW((_data___10+0x8000))
	movwf PREINC0,0
	movlw HIGH((_data___10+0x8000))
	movwf PREINC0,0
	movlw 14
	movwf PREINC0,0
	clrf PREINC0,0
	call type
	call cr
	call read_MI_payload
	clrf v,1
	clrf (v+1),1
	setf working,1
	bcf LATA,1,0
	return

; handle-back: defined at tests/commande.fs:48
handle_MI_back
	movlw LOW((_data___11+0x8000))
	movwf PREINC0,0
	movlw HIGH((_data___11+0x8000))
	movwf PREINC0,0
	movlw 13
	movwf PREINC0,0
	clrf PREINC0,0
	call type
	call cr
	call read_MI_payload
	clrf v,1
	clrf (v+1),1
	setf working,1
	bsf LATA,1,0
	return

; constant-speed: defined at tests/commande.fs:69
constant_MI_speed
	call dec_MI_tvmax
	movff (vmax+1),(v+1)
	movff vmax,v
	return

; null-speed: defined at tests/commande.fs:70
null_MI_speed
	clrf v,1
	clrf (v+1),1
	return

; timer3-reset: defined at tests/commande.fs:90
timer3_MI_reset
	call v_MI_to_MI_timer
	call dup
	movf POSTDEC0,0,0
	movwf POSTINC0,0
	clrf INDF0,0
	movf POSTDEC0,0,0
	movff POSTDEC0,TMR3H
	clrf INDF0,0
	movf POSTDEC0,0,0
	movff POSTDEC0,TMR3L
	return

; timer0-reset: defined at tests/commande.fs:94
timer0_MI_reset
	movlw 0xb
	movwf TMR0H,0
	movlw 0xdb
	movwf TMR0L,0
	return

; key?: defined at tests/commande.fs:100
key_QM_
	movlw -1
	btfss PIR1,5,0
	addlw 1
	movwf PREINC0,0
	movwf PREINC0,0
	return

; key: defined at tests/commande.fs:101
key
_lbl___276
	call timers_MI_reached
	movlw -1
	btfss PIR1,5,0
	addlw 1
	movwf PREINC0,0
	movwf PREINC0,0
	movf POSTDEC0,0,0
	iorwf POSTDEC0,0,0
	bz _lbl___276
	movff RCREG,PREINC0
	clrf PREINC0,0
	return

; init-variables: defined at tests/commande.fs:111
init_MI_variables
	clrf acc,1
	clrf dec,1
	clrf vmax,1
	clrf (vmax+1),1
	clrf tvmax,1
	clrf v,1
	clrf (v+1),1
	clrf working,1
	return

;---------------------------------------------------------
; Section: memory
;---------------------------------------------------------

; temp_x1: defined at lib/primitives.fs:22
temp_x1 equ 0x0

; temp_w: defined at lib/math.fs:3
temp_w equ 0x7

; temp_l: defined at lib/math.fs:3
temp_l equ 0x9

; temp_e: defined at lib/math.fs:3
temp_e equ 0xb

; temp_c0: defined at lib/math.fs:4
temp_c0 equ 0xd

; temp_c1: defined at lib/math.fs:4
temp_c1 equ 0xe

; temp_c2: defined at lib/math.fs:4
temp_c2 equ 0xf

; temp_c3: defined at lib/math.fs:4
temp_c3 equ 0x10

; math-flags: defined at lib/math.fs:87
math_MI_flags equ 0x11

; acc: defined at tests/can-commande.fs:26
acc equ 0x100

; dec: defined at tests/can-commande.fs:27
dec equ 0x102

; vmax: defined at tests/can-commande.fs:28
vmax equ 0x104

; tvmax: defined at tests/can-commande.fs:29
tvmax equ 0x106

; v: defined at tests/can-commande.fs:30
v equ 0x108

; working: defined at tests/commande.fs:26
working equ 0x10a

;---------------------------------------------------------
; Section: static data
;---------------------------------------------------------

; defined at tests/can-commande.fs:82 as:
; Sent stop
_data___1
	db 83,101,110,116,32,115,116,111
	db 112

; defined at tests/can-commande.fs:87 as:
; Sent free
_data___2
	db 83,101,110,116,32,102,114,101
	db 101

; defined at tests/can-commande.fs:92 as:
; Sent forth
_data___3
	db 83,101,110,116,32,102,111,114
	db 116,104

; defined at tests/can-commande.fs:98 as:
; Sent back
_data___4
	db 83,101,110,116,32,98,97,99
	db 107

; defined at tests/can-commande.fs:106 as:
; v=
_data___5
	db 118,61

; defined at tests/can-commande.fs:115 as:
; Message received
_data___6
	db 77,101,115,115,97,103,101,32
	db 114,101,99,101,105,118,101,100

; defined at tests/can-commande.fs:122 as:
; Unknown message
_data___7
	db 85,110,107,110,111,119,110,32
	db 109,101,115,115,97,103,101

; defined at tests/commande.fs:30 as:
; Received free
_data___8
	db 82,101,99,101,105,118,101,100
	db 32,102,114,101,101

; defined at tests/commande.fs:36 as:
; Received stop
_data___9
	db 82,101,99,101,105,118,101,100
	db 32,115,116,111,112

; defined at tests/commande.fs:41 as:
; Received forth
_data___10
	db 82,101,99,101,105,118,101,100
	db 32,102,111,114,116,104

; defined at tests/commande.fs:49 as:
; Received back
_data___11
	db 82,101,99,101,105,118,101,100
	db 32,98,97,99,107

; defined at tests/commande.fs:148 as:
; Welcome to motors control with can!
_data___12
	db 87,101,108,99,111,109,101,32
	db 116,111,32,109,111,116,111,114
	db 115,32,99,111,110,116,114,111
	db 108,32,119,105,116,104,32,99
	db 97,110,33

END
