\input texinfo

@setfilename rforth1.info
@settitle rforth1 programmer manual

@titlepage
@title rforth1 programmer manual
@subtitle @today{}
@author Samuel Tardieu

@end titlepage

@node Top, Introduction, (dir), (dir)

@menu
* Introduction::
* Conventions::

@detailmenu
 --- The Detailed Node Listing ---

Introduction

* Prerequisites::

Conventions

* Integer literals::
* Bit operations::
* Declaring variables::
* Declaring constants::

@end detailmenu
@end menu

@node Introduction, Conventions, Top, Top
@chapter Introduction

rforth1 is a 16 bits Forth compiler for Microchip PIC18Fxyz microcontrollers
family, where @code{x} is @code{2}, @code{4}, or @code{5}.

@menu
* Prerequisites::
@end menu

@node Prerequisites,  , Introduction, Introduction
@section Prerequisites

To run rforth1, you need to have Python 2.4 or greater installed as well
as the gputils package for the gpasm program.

@node Conventions,  , Introduction, Top
@chapter Conventions

@menu
* Integer literals::
* Bit operations::
* Declaring variables::
* Declaring constants::
@end menu

@node Integer literals, Bit operations, Conventions, Conventions
@section Integer literals

By default, integers are input in decimal. However, you can prefix them by
@code{0x} or @code{$} to use hexadecimal or @code{0b} to denote a binary
value. One or several minus signs in front of the integer value will negate
the integer. Thus the following values are valid:

@example
15
-17
$fe
--0x1234
0b11110101
@end example

@node Bit operations, Declaring variables, Integer literals, Conventions
@section Bit operations

The following operations allow you to manipulate individual bits at a given
memory address:
@itemize @bullet
@item @code{bit-set ( addr b -- )} set bit b of addr
@item @code{bit-clr ( addr b -- )} clear bit b of addr
@item @code{bit-toggle ( addr b -- )} toggle bit b of addr
@item @code{bit-set? ( addr b -- f )} check whether bit b of addr is set
@item @code{bit-clr? ( addr b -- f )} check whether bit b of addr is cleared
@end itemize

Using the @code{bit} defining word, you may create new words denoting
individual bits. For example, the following declaration

@example
PORTB 5 bit led
@end example

defines a new @code{led} word which, when executed, will push the values
@code{PORTB} and @code{5} on the stack. You can then use constructs such as

@example
led bit-set
@end example
to manipulate the individual bit.

@node Declaring constants,  , Declaring variables, Conventions
@section Declaring constants

Constants are declared using @code{constant}. Constants are propagated
throughout the compilation process and do not require any extra memory.

@example
10 constant x
x                 \ Push 10
@end example

@node Declaring variables, Declaring constants, Bit operations, Conventions
@section Declaring variables

Variables are declared using @code{variable} (16 bits) or
@code{cvariable} (8 bits). Variables are initialized to zero when the
program starts.

@example
variable x
cvariable c
x @@               \ Push the content of x
0x7f x !          \ Set x content to 7f (hexa)
c c@@              \ Push the content of c
3 x c!            \ Set c content to 3
@end example

16 bits variables with an initial value are declared using @code{value}
and then modified using @code{to}.

@example
10 value x
x                 \ Push the content of x
127 to x          \ Set x content to 127
@end example

@contents
@bye
